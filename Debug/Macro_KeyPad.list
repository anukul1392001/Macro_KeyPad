
Macro_KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000659c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006788  08006788  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006790  08006790  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08006798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a28  20000110  080068a8  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  080068a8  00020b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cff1  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002666  00000000  00000000  0002d131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  00030260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc7  00000000  00000000  00030c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dee0  00000000  00000000  000487c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ffc  00000000  00000000  000566a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc6a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac4  00000000  00000000  000dc6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000110 	.word	0x20000110
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006718 	.word	0x08006718

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000114 	.word	0x20000114
 80001d0:	08006718 	.word	0x08006718

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 f982 	bl	80007e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f82c 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f896 	bl	8000614 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f005 fcbc 	bl	8005e64 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  keyboardhid.MODIFIER = 0x02;  // left Shift
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <main+0x5c>)
 80004ee:	2202      	movs	r2, #2
 80004f0:	701a      	strb	r2, [r3, #0]
	  keyboardhid.KEYCODE1 = 0x04;  // press 'a'
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <main+0x5c>)
 80004f4:	2204      	movs	r2, #4
 80004f6:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x05;  // press 'b'
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <main+0x5c>)
 80004fa:	2205      	movs	r2, #5
 80004fc:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 80004fe:	2208      	movs	r2, #8
 8000500:	490c      	ldr	r1, [pc, #48]	; (8000534 <main+0x5c>)
 8000502:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x60>)
 8000504:	f004 f934 	bl	8004770 <USBD_HID_SendReport>
	  HAL_Delay (50);
 8000508:	2032      	movs	r0, #50	; 0x32
 800050a:	f000 f9dd 	bl	80008c8 <HAL_Delay>

	  keyboardhid.MODIFIER = 0x00;  // shift release
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <main+0x5c>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
	  keyboardhid.KEYCODE1 = 0x00;  // release key
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <main+0x5c>)
 8000516:	2200      	movs	r2, #0
 8000518:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;  // release key
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <main+0x5c>)
 800051c:	2200      	movs	r2, #0
 800051e:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000520:	2208      	movs	r2, #8
 8000522:	4904      	ldr	r1, [pc, #16]	; (8000534 <main+0x5c>)
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <main+0x60>)
 8000526:	f004 f923 	bl	8004770 <USBD_HID_SendReport>
	  HAL_Delay (1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f000 f9cb 	bl	80008c8 <HAL_Delay>
	  keyboardhid.MODIFIER = 0x02;  // left Shift
 8000532:	e7db      	b.n	80004ec <main+0x14>
 8000534:	2000012c 	.word	0x2000012c
 8000538:	2000013c 	.word	0x2000013c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 f8dc 	bl	8006708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b29      	ldr	r3, [pc, #164]	; (800060c <SystemClock_Config+0xd0>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a28      	ldr	r2, [pc, #160]	; (800060c <SystemClock_Config+0xd0>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <SystemClock_Config+0xd0>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <SystemClock_Config+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xd4>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005b0:	2319      	movs	r3, #25
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fe9e 	bl	8002308 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d2:	f000 f869 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f900 	bl	80027f8 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fe:	f000 f853 	bl	80006a8 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_GPIO_Init+0x8c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <MX_GPIO_Init+0x8c>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_GPIO_Init+0x8c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_GPIO_Init+0x8c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <MX_GPIO_Init+0x8c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_GPIO_Init+0x8c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_GPIO_Init+0x8c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <MX_GPIO_Init+0x8c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_GPIO_Init+0x8c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x90>)
 8000694:	f000 fa4e 	bl	8000b34 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020800 	.word	0x40020800

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_MspInit+0x4c>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x4c>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f89a 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <OTG_FS_IRQHandler+0x10>)
 800075e:	f000 fcbd 	bl	80010dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000618 	.word	0x20000618

0800076c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <SystemInit+0x20>)
 8000772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <SystemInit+0x20>)
 8000778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800077c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000796:	490e      	ldr	r1, [pc, #56]	; (80007d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000798:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007ac:	4c0b      	ldr	r4, [pc, #44]	; (80007dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007ba:	f7ff ffd7 	bl	800076c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007be:	f005 ff7f 	bl	80066c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007c2:	f7ff fe89 	bl	80004d8 <main>
  bx  lr    
 80007c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80007d4:	08006798 	.word	0x08006798
  ldr r2, =_sbss
 80007d8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80007dc:	20000b38 	.word	0x20000b38

080007e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC_IRQHandler>
	...

080007e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <HAL_Init+0x40>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <HAL_Init+0x40>)
 80007ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_Init+0x40>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_Init+0x40>)
 80007fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x40>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x40>)
 8000806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f94f 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	200f      	movs	r0, #15
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff ff4c 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023c00 	.word	0x40023c00

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f967 	bl	8000b1a <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f92f 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_IncTick+0x20>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x24>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_IncTick+0x24>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000134 	.word	0x20000134

080008b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <HAL_GetTick+0x14>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000134 	.word	0x20000134

080008c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff ffee 	bl	80008b0 <HAL_GetTick>
 80008d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e0:	d005      	beq.n	80008ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_Delay+0x44>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ee:	bf00      	nop
 80008f0:	f7ff ffde 	bl	80008b0 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f7      	bhi.n	80008f0 <HAL_Delay+0x28>
  {
  }
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db0b      	blt.n	800099e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f003 021f 	and.w	r2, r3, #31
 800098c:	4907      	ldr	r1, [pc, #28]	; (80009ac <__NVIC_EnableIRQ+0x38>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	2001      	movs	r0, #1
 8000996:	fa00 f202 	lsl.w	r2, r0, r2
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000e100 	.word	0xe000e100

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff8e 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff29 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff3e 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff8e 	bl	8000a04 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5d 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff31 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ffa2 	bl	8000a6c <SysTick_Config>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	e159      	b.n	8000e04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b50:	2201      	movs	r2, #1
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	f040 8148 	bne.w	8000dfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d005      	beq.n	8000b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d130      	bne.n	8000be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	091b      	lsrs	r3, r3, #4
 8000bd2:	f003 0201 	and.w	r2, r3, #1
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d017      	beq.n	8000c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d123      	bne.n	8000c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	08da      	lsrs	r2, r3, #3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3208      	adds	r2, #8
 8000c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	220f      	movs	r2, #15
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	691a      	ldr	r2, [r3, #16]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	08da      	lsrs	r2, r3, #3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3208      	adds	r2, #8
 8000c72:	69b9      	ldr	r1, [r7, #24]
 8000c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0203 	and.w	r2, r3, #3
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 80a2 	beq.w	8000dfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b57      	ldr	r3, [pc, #348]	; (8000e1c <HAL_GPIO_Init+0x2e8>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a56      	ldr	r2, [pc, #344]	; (8000e1c <HAL_GPIO_Init+0x2e8>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b54      	ldr	r3, [pc, #336]	; (8000e1c <HAL_GPIO_Init+0x2e8>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd6:	4a52      	ldr	r2, [pc, #328]	; (8000e20 <HAL_GPIO_Init+0x2ec>)
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a49      	ldr	r2, [pc, #292]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d019      	beq.n	8000d36 <HAL_GPIO_Init+0x202>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a48      	ldr	r2, [pc, #288]	; (8000e28 <HAL_GPIO_Init+0x2f4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0x1fe>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a47      	ldr	r2, [pc, #284]	; (8000e2c <HAL_GPIO_Init+0x2f8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d00d      	beq.n	8000d2e <HAL_GPIO_Init+0x1fa>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a46      	ldr	r2, [pc, #280]	; (8000e30 <HAL_GPIO_Init+0x2fc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d007      	beq.n	8000d2a <HAL_GPIO_Init+0x1f6>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a45      	ldr	r2, [pc, #276]	; (8000e34 <HAL_GPIO_Init+0x300>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_GPIO_Init+0x1f2>
 8000d22:	2304      	movs	r3, #4
 8000d24:	e008      	b.n	8000d38 <HAL_GPIO_Init+0x204>
 8000d26:	2307      	movs	r3, #7
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x204>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e004      	b.n	8000d38 <HAL_GPIO_Init+0x204>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	e002      	b.n	8000d38 <HAL_GPIO_Init+0x204>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_Init+0x204>
 8000d36:	2300      	movs	r3, #0
 8000d38:	69fa      	ldr	r2, [r7, #28]
 8000d3a:	f002 0203 	and.w	r2, r2, #3
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	4093      	lsls	r3, r2
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d48:	4935      	ldr	r1, [pc, #212]	; (8000e20 <HAL_GPIO_Init+0x2ec>)
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d56:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d80:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000da4:	4a24      	ldr	r2, [pc, #144]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dce:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	2b0f      	cmp	r3, #15
 8000e08:	f67f aea2 	bls.w	8000b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020c00 	.word	0x40020c00
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40013c00 	.word	0x40013c00

08000e3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3e:	b08f      	sub	sp, #60	; 0x3c
 8000e40:	af0a      	add	r7, sp, #40	; 0x28
 8000e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e10f      	b.n	800106e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d106      	bne.n	8000e6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f005 f931 	bl	80060d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2203      	movs	r2, #3
 8000e72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 ff80 	bl	8002d92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	687e      	ldr	r6, [r7, #4]
 8000e9a:	466d      	mov	r5, sp
 8000e9c:	f106 0410 	add.w	r4, r6, #16
 8000ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eac:	e885 0003 	stmia.w	r5, {r0, r1}
 8000eb0:	1d33      	adds	r3, r6, #4
 8000eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eb4:	6838      	ldr	r0, [r7, #0]
 8000eb6:	f001 fe57 	bl	8002b68 <USB_CoreInit>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d005      	beq.n	8000ecc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e0d0      	b.n	800106e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 ff6e 	bl	8002db4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e04a      	b.n	8000f74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	333d      	adds	r3, #61	; 0x3d
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4413      	add	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	333c      	adds	r3, #60	; 0x3c
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	b298      	uxth	r0, r3
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	3344      	adds	r3, #68	; 0x44
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3340      	adds	r3, #64	; 0x40
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3348      	adds	r3, #72	; 0x48
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	334c      	adds	r3, #76	; 0x4c
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	3354      	adds	r3, #84	; 0x54
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	3301      	adds	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d3af      	bcc.n	8000ede <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e044      	b.n	800100e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3301      	adds	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3b5      	bcc.n	8000f84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	687e      	ldr	r6, [r7, #4]
 8001020:	466d      	mov	r5, sp
 8001022:	f106 0410 	add.w	r4, r6, #16
 8001026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001032:	e885 0003 	stmia.w	r5, {r0, r1}
 8001036:	1d33      	adds	r3, r6, #4
 8001038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	f001 ff06 	bl	8002e4c <USB_DevInit>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2202      	movs	r2, #2
 800104a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00d      	b.n	800106e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f003 f855 	bl	8004116 <USB_DevDisconnect>

  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001076 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_PCD_Start+0x1c>
 800108e:	2302      	movs	r3, #2
 8001090:	e020      	b.n	80010d4 <HAL_PCD_Start+0x5e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d109      	bne.n	80010b6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fe58 	bl	8002d70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 f805 	bl	80040d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b08d      	sub	sp, #52	; 0x34
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 f8c3 	bl	800427e <USB_GetMode>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 848a 	bne.w	8001a14 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f003 f827 	bl	8004158 <USB_ReadInterrupts>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 8480 	beq.w	8001a12 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f003 f814 	bl	8004158 <USB_ReadInterrupts>
 8001130:	4603      	mov	r3, r0
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b02      	cmp	r3, #2
 8001138:	d107      	bne.n	800114a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f002 0202 	and.w	r2, r2, #2
 8001148:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f802 	bl	8004158 <USB_ReadInterrupts>
 8001154:	4603      	mov	r3, r0
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b10      	cmp	r3, #16
 800115c:	d161      	bne.n	8001222 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	699a      	ldr	r2, [r3, #24]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0210 	bic.w	r2, r2, #16
 800116c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f003 020f 	and.w	r2, r3, #15
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	3304      	adds	r3, #4
 800118c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	0c5b      	lsrs	r3, r3, #17
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	2b02      	cmp	r3, #2
 8001198:	d124      	bne.n	80011e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d035      	beq.n	8001212 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	6a38      	ldr	r0, [r7, #32]
 80011ba:	f002 fe39 	bl	8003e30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	691a      	ldr	r2, [r3, #16]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ca:	441a      	add	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	6a1a      	ldr	r2, [r3, #32]
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011dc:	441a      	add	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	621a      	str	r2, [r3, #32]
 80011e2:	e016      	b.n	8001212 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	0c5b      	lsrs	r3, r3, #17
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	2b06      	cmp	r3, #6
 80011ee:	d110      	bne.n	8001212 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80011f6:	2208      	movs	r2, #8
 80011f8:	4619      	mov	r1, r3
 80011fa:	6a38      	ldr	r0, [r7, #32]
 80011fc:	f002 fe18 	bl	8003e30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	6a1a      	ldr	r2, [r3, #32]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800120c:	441a      	add	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0210 	orr.w	r2, r2, #16
 8001220:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f002 ff96 	bl	8004158 <USB_ReadInterrupts>
 800122c:	4603      	mov	r3, r0
 800122e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001232:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001236:	f040 80a7 	bne.w	8001388 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f002 ff9b 	bl	800417e <USB_ReadDevAllOutEpInterrupt>
 8001248:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800124a:	e099      	b.n	8001380 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800124c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 808e 	beq.w	8001374 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f002 ffbf 	bl	80041e6 <USB_ReadDevOutEPInterrupt>
 8001268:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00c      	beq.n	800128e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	015a      	lsls	r2, r3, #5
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	4413      	add	r3, r2
 800127c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001280:	461a      	mov	r2, r3
 8001282:	2301      	movs	r3, #1
 8001284:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 feab 	bl	8001fe4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00c      	beq.n	80012b2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	015a      	lsls	r2, r3, #5
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	4413      	add	r3, r2
 80012a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012a4:	461a      	mov	r2, r3
 80012a6:	2308      	movs	r3, #8
 80012a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 ff81 	bl	80021b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	015a      	lsls	r2, r3, #5
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c8:	461a      	mov	r2, r3
 80012ca:	2310      	movs	r3, #16
 80012cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d030      	beq.n	800133a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e0:	2b80      	cmp	r3, #128	; 0x80
 80012e2:	d109      	bne.n	80012f8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80012f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	3304      	adds	r3, #4
 800130c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	78db      	ldrb	r3, [r3, #3]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d108      	bne.n	8001328 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2200      	movs	r2, #0
 800131a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f004 ffd0 	bl	80062c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	015a      	lsls	r2, r3, #5
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4413      	add	r3, r2
 8001330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001334:	461a      	mov	r2, r3
 8001336:	2302      	movs	r3, #2
 8001338:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	015a      	lsls	r2, r3, #5
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	4413      	add	r3, r2
 800134c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001350:	461a      	mov	r2, r3
 8001352:	2320      	movs	r3, #32
 8001354:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d009      	beq.n	8001374 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	015a      	lsls	r2, r3, #5
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	4413      	add	r3, r2
 8001368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136c:	461a      	mov	r2, r3
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	3301      	adds	r3, #1
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	085b      	lsrs	r3, r3, #1
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	2b00      	cmp	r3, #0
 8001384:	f47f af62 	bne.w	800124c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fee3 	bl	8004158 <USB_ReadInterrupts>
 8001392:	4603      	mov	r3, r0
 8001394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800139c:	f040 80db 	bne.w	8001556 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 ff04 	bl	80041b2 <USB_ReadDevAllInEpInterrupt>
 80013aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013b0:	e0cd      	b.n	800154e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80c2 	beq.w	8001542 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 ff2a 	bl	8004222 <USB_ReadDevInEPInterrupt>
 80013ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d057      	beq.n	800148a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	2201      	movs	r2, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69f9      	ldr	r1, [r7, #28]
 80013f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013fa:	4013      	ands	r3, r2
 80013fc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	015a      	lsls	r2, r3, #5
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800140a:	461a      	mov	r2, r3
 800140c:	2301      	movs	r3, #1
 800140e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d132      	bne.n	800147e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	334c      	adds	r3, #76	; 0x4c
 8001428:	6819      	ldr	r1, [r3, #0]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4403      	add	r3, r0
 8001438:	3348      	adds	r3, #72	; 0x48
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4419      	add	r1, r3
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4403      	add	r3, r0
 800144c:	334c      	adds	r3, #76	; 0x4c
 800144e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	2b00      	cmp	r3, #0
 8001454:	d113      	bne.n	800147e <HAL_PCD_IRQHandler+0x3a2>
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3354      	adds	r3, #84	; 0x54
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d108      	bne.n	800147e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001476:	461a      	mov	r2, r3
 8001478:	2101      	movs	r1, #1
 800147a:	f002 ff31 	bl	80042e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f004 fea4 	bl	80061d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	015a      	lsls	r2, r3, #5
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	4413      	add	r3, r2
 800149c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014a0:	461a      	mov	r2, r3
 80014a2:	2308      	movs	r3, #8
 80014a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	015a      	lsls	r2, r3, #5
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014bc:	461a      	mov	r2, r3
 80014be:	2310      	movs	r3, #16
 80014c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014d8:	461a      	mov	r2, r3
 80014da:	2340      	movs	r3, #64	; 0x40
 80014dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d023      	beq.n	8001530 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80014e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ea:	6a38      	ldr	r0, [r7, #32]
 80014ec:	f001 fe12 	bl	8003114 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	3338      	adds	r3, #56	; 0x38
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	3304      	adds	r3, #4
 8001502:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	78db      	ldrb	r3, [r3, #3]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d108      	bne.n	800151e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2200      	movs	r2, #0
 8001510:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4619      	mov	r1, r3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f004 fee7 	bl	80062ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800152a:	461a      	mov	r2, r3
 800152c:	2302      	movs	r3, #2
 800152e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800153a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fcc3 	bl	8001ec8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	3301      	adds	r3, #1
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f af2e 	bne.w	80013b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fdfc 	bl	8004158 <USB_ReadInterrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800156a:	d122      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001586:	2b01      	cmp	r3, #1
 8001588:	d108      	bne.n	800159c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001592:	2100      	movs	r1, #0
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 feab 	bl	80022f0 <HAL_PCDEx_LPM_Callback>
 800159a:	e002      	b.n	80015a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f004 fe85 	bl	80062ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 fdce 	bl	8004158 <USB_ReadInterrupts>
 80015bc:	4603      	mov	r3, r0
 80015be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015c6:	d112      	bne.n	80015ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d102      	bne.n	80015de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f004 fe41 	bl	8006260 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015ec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 fdb0 	bl	8004158 <USB_ReadInterrupts>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001602:	f040 80b7 	bne.w	8001774 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2110      	movs	r1, #16
 8001620:	4618      	mov	r0, r3
 8001622:	f001 fd77 	bl	8003114 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162a:	e046      	b.n	80016ba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	4413      	add	r3, r2
 8001634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001638:	461a      	mov	r2, r3
 800163a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800163e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	4413      	add	r3, r2
 8001648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001650:	0151      	lsls	r1, r2, #5
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	440a      	add	r2, r1
 8001656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800165a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800165e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001662:	015a      	lsls	r2, r3, #5
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800166c:	461a      	mov	r2, r3
 800166e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001672:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001676:	015a      	lsls	r2, r3, #5
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001684:	0151      	lsls	r1, r2, #5
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	440a      	add	r2, r1
 800168a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800168e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001692:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	015a      	lsls	r2, r3, #5
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	4413      	add	r3, r2
 800169c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a4:	0151      	lsls	r1, r2, #5
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	440a      	add	r2, r1
 80016aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	3301      	adds	r3, #1
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3b3      	bcc.n	800162c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d016      	beq.n	800170e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f0:	f043 030b 	orr.w	r3, r3, #11
 80016f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001706:	f043 030b 	orr.w	r3, r3, #11
 800170a:	6453      	str	r3, [r2, #68]	; 0x44
 800170c:	e015      	b.n	800173a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800171c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001720:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001724:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001734:	f043 030b 	orr.w	r3, r3, #11
 8001738:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001748:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800174c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800175e:	461a      	mov	r2, r3
 8001760:	f002 fdbe 	bl	80042e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fced 	bl	8004158 <USB_ReadInterrupts>
 800177e:	4603      	mov	r3, r0
 8001780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001788:	d124      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fd83 	bl	800429a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fd38 	bl	800320e <USB_GetDevSpeed>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681c      	ldr	r4, [r3, #0]
 80017aa:	f001 f9d1 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 80017ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	4620      	mov	r0, r4
 80017ba:	f001 fa37 	bl	8002c2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f004 fd2f 	bl	8006222 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fcbd 	bl	8004158 <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d10a      	bne.n	80017fe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f004 fd0c 	bl	8006206 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f002 0208 	and.w	r2, r2, #8
 80017fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fca8 	bl	8004158 <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180e:	2b80      	cmp	r3, #128	; 0x80
 8001810:	d122      	bne.n	8001858 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800181e:	2301      	movs	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
 8001822:	e014      	b.n	800184e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	b2db      	uxtb	r3, r3
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fb0f 	bl	8001e66 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	3301      	adds	r3, #1
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001854:	429a      	cmp	r2, r3
 8001856:	d3e5      	bcc.n	8001824 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fc7b 	bl	8004158 <USB_ReadInterrupts>
 8001862:	4603      	mov	r3, r0
 8001864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800186c:	d13b      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800186e:	2301      	movs	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
 8001872:	e02b      	b.n	80018cc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001888:	4613      	mov	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3340      	adds	r3, #64	; 0x40
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d115      	bne.n	80018c6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800189a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800189c:	2b00      	cmp	r3, #0
 800189e:	da12      	bge.n	80018c6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	333f      	adds	r3, #63	; 0x3f
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 fad0 	bl	8001e66 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	3301      	adds	r3, #1
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3ce      	bcc.n	8001874 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 fc34 	bl	8004158 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018fa:	d155      	bne.n	80019a8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018fc:	2301      	movs	r3, #1
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001900:	e045      	b.n	800198e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d12e      	bne.n	8001988 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800192a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800192c:	2b00      	cmp	r3, #0
 800192e:	da2b      	bge.n	8001988 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800193c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001940:	429a      	cmp	r2, r3
 8001942:	d121      	bne.n	8001988 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001948:	4613      	mov	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10a      	bne.n	8001988 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001984:	6053      	str	r3, [r2, #4]
            break;
 8001986:	e007      	b.n	8001998 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3301      	adds	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001994:	429a      	cmp	r2, r3
 8001996:	d3b4      	bcc.n	8001902 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 fbd3 	bl	8004158 <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019bc:	d10a      	bne.n	80019d4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f004 fca6 	bl	8006310 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80019d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 fbbd 	bl	8004158 <USB_ReadInterrupts>
 80019de:	4603      	mov	r3, r0
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d115      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f004 fc96 	bl	800632c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6859      	ldr	r1, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	e000      	b.n	8001a14 <HAL_PCD_IRQHandler+0x938>
      return;
 8001a12:	bf00      	nop
    }
  }
}
 8001a14:	3734      	adds	r7, #52	; 0x34
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}

08001a1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_PCD_SetAddress+0x1a>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e013      	b.n	8001a5c <HAL_PCD_SetAddress+0x42>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fb1b 	bl	8004088 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	4611      	mov	r1, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	4603      	mov	r3, r0
 8001a74:	70fb      	strb	r3, [r7, #3]
 8001a76:	460b      	mov	r3, r1
 8001a78:	803b      	strh	r3, [r7, #0]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da0f      	bge.n	8001aaa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 020f 	and.w	r2, r3, #15
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	3338      	adds	r3, #56	; 0x38
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	705a      	strb	r2, [r3, #1]
 8001aa8:	e00f      	b.n	8001aca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f003 020f 	and.w	r2, r3, #15
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ad6:	883a      	ldrh	r2, [r7, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	78ba      	ldrb	r2, [r7, #2]
 8001ae0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	785b      	ldrb	r3, [r3, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001af4:	78bb      	ldrb	r3, [r7, #2]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d102      	bne.n	8001b00 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_PCD_EP_Open+0xaa>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e00e      	b.n	8001b2c <HAL_PCD_EP_Open+0xc8>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fb9b 	bl	8003258 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da0f      	bge.n	8001b68 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 020f 	and.w	r2, r3, #15
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	3338      	adds	r3, #56	; 0x38
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	705a      	strb	r2, [r3, #1]
 8001b66:	e00f      	b.n	8001b88 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	f003 020f 	and.w	r2, r3, #15
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3304      	adds	r3, #4
 8001b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_PCD_EP_Close+0x6e>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e00e      	b.n	8001bc0 <HAL_PCD_EP_Close+0x8c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f001 fbd9 	bl	8003368 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	f003 020f 	and.w	r2, r3, #15
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	3304      	adds	r3, #4
 8001bf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2200      	movs	r2, #0
 8001c08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c24:	7afb      	ldrb	r3, [r7, #11]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6979      	ldr	r1, [r7, #20]
 8001c3c:	f001 feb8 	bl	80039b0 <USB_EP0StartXfer>
 8001c40:	e008      	b.n	8001c54 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	6979      	ldr	r1, [r7, #20]
 8001c50:	f001 fc66 	bl	8003520 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
 8001c70:	f003 020f 	and.w	r2, r3, #15
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3338      	adds	r3, #56	; 0x38
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	3304      	adds	r3, #4
 8001c84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d102      	bne.n	8001cb8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6979      	ldr	r1, [r7, #20]
 8001cd0:	f001 fe6e 	bl	80039b0 <USB_EP0StartXfer>
 8001cd4:	e008      	b.n	8001ce8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	6979      	ldr	r1, [r7, #20]
 8001ce4:	f001 fc1c 	bl	8003520 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d901      	bls.n	8001d10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e050      	b.n	8001db2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da0f      	bge.n	8001d38 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	3338      	adds	r3, #56	; 0x38
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2201      	movs	r2, #1
 8001d34:	705a      	strb	r2, [r3, #1]
 8001d36:	e00d      	b.n	8001d54 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_EP_SetStall+0x82>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e01e      	b.n	8001db2 <HAL_PCD_EP_SetStall+0xc0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68f9      	ldr	r1, [r7, #12]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 f8ac 	bl	8003ee0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	b2d9      	uxtb	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001da2:	461a      	mov	r2, r3
 8001da4:	f002 fa9c 	bl	80042e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	f003 020f 	and.w	r2, r3, #15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d901      	bls.n	8001dd8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e042      	b.n	8001e5e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da0f      	bge.n	8001e00 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 020f 	and.w	r2, r3, #15
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	3338      	adds	r3, #56	; 0x38
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	3304      	adds	r3, #4
 8001df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	705a      	strb	r2, [r3, #1]
 8001dfe:	e00f      	b.n	8001e20 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_PCD_EP_ClrStall+0x86>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e00e      	b.n	8001e5e <HAL_PCD_EP_ClrStall+0xa4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 f8b4 	bl	8003fbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	da0c      	bge.n	8001e94 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 020f 	and.w	r2, r3, #15
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	3338      	adds	r3, #56	; 0x38
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3304      	adds	r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e00c      	b.n	8001eae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 020f 	and.w	r2, r3, #15
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3304      	adds	r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68f9      	ldr	r1, [r7, #12]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f001 fed3 	bl	8003c60 <USB_EPStopXfer>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3338      	adds	r3, #56	; 0x38
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d901      	bls.n	8001f00 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e06c      	b.n	8001fda <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d902      	bls.n	8001f1c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	3303      	adds	r3, #3
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f24:	e02b      	b.n	8001f7e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d902      	bls.n	8001f42 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3303      	adds	r3, #3
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6919      	ldr	r1, [r3, #16]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6978      	ldr	r0, [r7, #20]
 8001f62:	f001 ff27 	bl	8003db4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	441a      	add	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	441a      	add	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d809      	bhi.n	8001fa8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d203      	bcs.n	8001fa8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1be      	bne.n	8001f26 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d811      	bhi.n	8001fd8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	2201      	movs	r2, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	6939      	ldr	r1, [r7, #16]
 8001fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	333c      	adds	r3, #60	; 0x3c
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d17b      	bne.n	8002112 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d015      	beq.n	8002050 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	4a61      	ldr	r2, [pc, #388]	; (80021ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	f240 80b9 	bls.w	80021a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80b3 	beq.w	80021a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002046:	461a      	mov	r2, r3
 8002048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204c:	6093      	str	r3, [r2, #8]
 800204e:	e0a7      	b.n	80021a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002066:	461a      	mov	r2, r3
 8002068:	2320      	movs	r3, #32
 800206a:	6093      	str	r3, [r2, #8]
 800206c:	e098      	b.n	80021a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002074:	2b00      	cmp	r3, #0
 8002076:	f040 8093 	bne.w	80021a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	4a4b      	ldr	r2, [pc, #300]	; (80021ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d90f      	bls.n	80020a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	4413      	add	r3, r2
 8002094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002098:	461a      	mov	r2, r3
 800209a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800209e:	6093      	str	r3, [r2, #8]
 80020a0:	e07e      	b.n	80021a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	0159      	lsls	r1, r3, #5
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ce:	1ad2      	subs	r2, r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d114      	bne.n	8002104 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020ec:	461a      	mov	r2, r3
 80020ee:	2101      	movs	r1, #1
 80020f0:	f002 f8f6 	bl	80042e0 <USB_EP0_OutStart>
 80020f4:	e006      	b.n	8002104 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	441a      	add	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f004 f846 	bl	800619c <HAL_PCD_DataOutStageCallback>
 8002110:	e046      	b.n	80021a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d124      	bne.n	8002164 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002130:	461a      	mov	r2, r3
 8002132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002136:	6093      	str	r3, [r2, #8]
 8002138:	e032      	b.n	80021a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	4413      	add	r3, r2
 800214c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002150:	461a      	mov	r2, r3
 8002152:	2320      	movs	r3, #32
 8002154:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4619      	mov	r1, r3
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f004 f81d 	bl	800619c <HAL_PCD_DataOutStageCallback>
 8002162:	e01d      	b.n	80021a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d114      	bne.n	8002194 <PCD_EP_OutXfrComplete_int+0x1b0>
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800218c:	461a      	mov	r2, r3
 800218e:	2100      	movs	r1, #0
 8002190:	f002 f8a6 	bl	80042e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	4619      	mov	r1, r3
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f003 fffe 	bl	800619c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	4f54300a 	.word	0x4f54300a
 80021b0:	4f54310a 	.word	0x4f54310a

080021b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	333c      	adds	r3, #60	; 0x3c
 80021cc:	3304      	adds	r3, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a15      	ldr	r2, [pc, #84]	; (800223c <PCD_EP_OutSetupPacket_int+0x88>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d90e      	bls.n	8002208 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d009      	beq.n	8002208 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002200:	461a      	mov	r2, r3
 8002202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002206:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f003 ffb5 	bl	8006178 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a0a      	ldr	r2, [pc, #40]	; (800223c <PCD_EP_OutSetupPacket_int+0x88>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d90c      	bls.n	8002230 <PCD_EP_OutSetupPacket_int+0x7c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d108      	bne.n	8002230 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002228:	461a      	mov	r2, r3
 800222a:	2101      	movs	r1, #1
 800222c:	f002 f858 	bl	80042e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	4f54300a 	.word	0x4f54300a

08002240 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
 800224c:	4613      	mov	r3, r2
 800224e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d107      	bne.n	800226e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800225e:	883b      	ldrh	r3, [r7, #0]
 8002260:	0419      	lsls	r1, r3, #16
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	430a      	orrs	r2, r1
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
 800226c:	e028      	b.n	80022c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4413      	add	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e00d      	b.n	800229e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	3340      	adds	r3, #64	; 0x40
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	4413      	add	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	3301      	adds	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d3ec      	bcc.n	8002282 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022a8:	883b      	ldrh	r3, [r7, #0]
 80022aa:	0418      	lsls	r0, r3, #16
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	4302      	orrs	r2, r0
 80022b8:	3340      	adds	r3, #64	; 0x40
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e267      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d075      	beq.n	8002412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002326:	4b88      	ldr	r3, [pc, #544]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b04      	cmp	r3, #4
 8002330:	d00c      	beq.n	800234c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002332:	4b85      	ldr	r3, [pc, #532]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800233a:	2b08      	cmp	r3, #8
 800233c:	d112      	bne.n	8002364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233e:	4b82      	ldr	r3, [pc, #520]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234a:	d10b      	bne.n	8002364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	4b7e      	ldr	r3, [pc, #504]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d05b      	beq.n	8002410 <HAL_RCC_OscConfig+0x108>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d157      	bne.n	8002410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e242      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236c:	d106      	bne.n	800237c <HAL_RCC_OscConfig+0x74>
 800236e:	4b76      	ldr	r3, [pc, #472]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a75      	ldr	r2, [pc, #468]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e01d      	b.n	80023b8 <HAL_RCC_OscConfig+0xb0>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x98>
 8002386:	4b70      	ldr	r3, [pc, #448]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6f      	ldr	r2, [pc, #444]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b6d      	ldr	r3, [pc, #436]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6c      	ldr	r2, [pc, #432]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0xb0>
 80023a0:	4b69      	ldr	r3, [pc, #420]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a68      	ldr	r2, [pc, #416]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 80023a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b66      	ldr	r3, [pc, #408]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a65      	ldr	r2, [pc, #404]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fa76 	bl	80008b0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe fa72 	bl	80008b0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e207      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0xc0>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe fa62 	bl	80008b0 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe fa5e 	bl	80008b0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e1f3      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	4b51      	ldr	r3, [pc, #324]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0xe8>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d063      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241e:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002432:	2b08      	cmp	r3, #8
 8002434:	d11c      	bne.n	8002470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002436:	4b44      	ldr	r3, [pc, #272]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d116      	bne.n	8002470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	4b41      	ldr	r3, [pc, #260]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x152>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e1c7      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4937      	ldr	r1, [pc, #220]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	e03a      	b.n	80024e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d020      	beq.n	80024ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002478:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_RCC_OscConfig+0x244>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe fa17 	bl	80008b0 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002486:	f7fe fa13 	bl	80008b0 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e1a8      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b28      	ldr	r3, [pc, #160]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4925      	ldr	r1, [pc, #148]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
 80024b8:	e015      	b.n	80024e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <HAL_RCC_OscConfig+0x244>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe f9f6 	bl	80008b0 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c8:	f7fe f9f2 	bl	80008b0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e187      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d036      	beq.n	8002560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d016      	beq.n	8002528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_RCC_OscConfig+0x248>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7fe f9d6 	bl	80008b0 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002508:	f7fe f9d2 	bl	80008b0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e167      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_OscConfig+0x240>)
 800251c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x200>
 8002526:	e01b      	b.n	8002560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_OscConfig+0x248>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe f9bf 	bl	80008b0 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	e00e      	b.n	8002554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002536:	f7fe f9bb 	bl	80008b0 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d907      	bls.n	8002554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e150      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
 8002548:	40023800 	.word	0x40023800
 800254c:	42470000 	.word	0x42470000
 8002550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ea      	bne.n	8002536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8097 	beq.w	800269c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002572:	4b81      	ldr	r3, [pc, #516]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10f      	bne.n	800259e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	4b7d      	ldr	r3, [pc, #500]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a7c      	ldr	r2, [pc, #496]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b7a      	ldr	r3, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259a:	2301      	movs	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b77      	ldr	r3, [pc, #476]	; (800277c <HAL_RCC_OscConfig+0x474>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d118      	bne.n	80025dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025aa:	4b74      	ldr	r3, [pc, #464]	; (800277c <HAL_RCC_OscConfig+0x474>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a73      	ldr	r2, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x474>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b6:	f7fe f97b 	bl	80008b0 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025be:	f7fe f977 	bl	80008b0 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e10c      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCC_OscConfig+0x474>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x2ea>
 80025e4:	4b64      	ldr	r3, [pc, #400]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a63      	ldr	r2, [pc, #396]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
 80025f0:	e01c      	b.n	800262c <HAL_RCC_OscConfig+0x324>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0x30c>
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a5e      	ldr	r2, [pc, #376]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a5b      	ldr	r2, [pc, #364]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
 8002612:	e00b      	b.n	800262c <HAL_RCC_OscConfig+0x324>
 8002614:	4b58      	ldr	r3, [pc, #352]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a57      	ldr	r2, [pc, #348]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
 8002620:	4b55      	ldr	r3, [pc, #340]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	4a54      	ldr	r2, [pc, #336]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002626:	f023 0304 	bic.w	r3, r3, #4
 800262a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d015      	beq.n	8002660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe f93c 	bl	80008b0 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263a:	e00a      	b.n	8002652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7fe f938 	bl	80008b0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e0cb      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0ee      	beq.n	800263c <HAL_RCC_OscConfig+0x334>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7fe f926 	bl	80008b0 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002666:	e00a      	b.n	800267e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7fe f922 	bl	80008b0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0b5      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267e:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1ee      	bne.n	8002668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002690:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	4a38      	ldr	r2, [pc, #224]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a1 	beq.w	80027e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026a6:	4b34      	ldr	r3, [pc, #208]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d05c      	beq.n	800276c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d141      	bne.n	800273e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <HAL_RCC_OscConfig+0x478>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe f8f6 	bl	80008b0 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe f8f2 	bl	80008b0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e087      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	019b      	lsls	r3, r3, #6
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	3b01      	subs	r3, #1
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	491b      	ldr	r1, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x478>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7fe f8cb 	bl	80008b0 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271e:	f7fe f8c7 	bl	80008b0 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e05c      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x416>
 800273c:	e054      	b.n	80027e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCC_OscConfig+0x478>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe f8b4 	bl	80008b0 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe f8b0 	bl	80008b0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e045      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_OscConfig+0x470>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x444>
 800276a:	e03d      	b.n	80027e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e038      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
 8002778:	40023800 	.word	0x40023800
 800277c:	40007000 	.word	0x40007000
 8002780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_RCC_OscConfig+0x4ec>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d028      	beq.n	80027e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d121      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d11a      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b4:	4013      	ands	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027bc:	4293      	cmp	r3, r2
 80027be:	d111      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	3b01      	subs	r3, #1
 80027ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0cc      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b68      	ldr	r3, [pc, #416]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d90c      	bls.n	8002834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b63      	ldr	r3, [pc, #396]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0b8      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d020      	beq.n	8002882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800284c:	4b59      	ldr	r3, [pc, #356]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a58      	ldr	r2, [pc, #352]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002864:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4a52      	ldr	r2, [pc, #328]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800286e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002870:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	494d      	ldr	r1, [pc, #308]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d044      	beq.n	8002918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d119      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e07f      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06f      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e067      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4934      	ldr	r1, [pc, #208]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e8:	f7fd ffe2 	bl	80008b0 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7fd ffde 	bl	80008b0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e04f      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d20c      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e032      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4916      	ldr	r1, [pc, #88]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	490e      	ldr	r1, [pc, #56]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800297e:	f000 f821 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 8002982:	4602      	mov	r2, r0
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	490a      	ldr	r1, [pc, #40]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	5ccb      	ldrb	r3, [r1, r3]
 8002992:	fa22 f303 	lsr.w	r3, r2, r3
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd ff42 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00
 80029b4:	40023800 	.word	0x40023800
 80029b8:	08006778 	.word	0x08006778
 80029bc:	20000000 	.word	0x20000000
 80029c0:	20000004 	.word	0x20000004

080029c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c8:	b090      	sub	sp, #64	; 0x40
 80029ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
 80029d0:	2300      	movs	r3, #0
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d4:	2300      	movs	r3, #0
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x180>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d00d      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x40>
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	f200 80a1 	bhi.w	8002b30 <HAL_RCC_GetSysClockFreq+0x16c>
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x34>
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d003      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x3a>
 80029f6:	e09b      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x184>)
 80029fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029fc:	e09b      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029fe:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a02:	e098      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a0e:	4b4d      	ldr	r3, [pc, #308]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d028      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1a:	4b4a      	ldr	r3, [pc, #296]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	2200      	movs	r2, #0
 8002a22:	623b      	str	r3, [r7, #32]
 8002a24:	627a      	str	r2, [r7, #36]	; 0x24
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a30:	fb03 f201 	mul.w	r2, r3, r1
 8002a34:	2300      	movs	r3, #0
 8002a36:	fb00 f303 	mul.w	r3, r0, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a43      	ldr	r2, [pc, #268]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a3e:	fba0 1202 	umull	r1, r2, r0, r2
 8002a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a44:	460a      	mov	r2, r1
 8002a46:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4a:	4413      	add	r3, r2
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	2200      	movs	r2, #0
 8002a52:	61bb      	str	r3, [r7, #24]
 8002a54:	61fa      	str	r2, [r7, #28]
 8002a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a5e:	f7fd fbb9 	bl	80001d4 <__aeabi_uldivmod>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4613      	mov	r3, r2
 8002a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6a:	e053      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6c:	4b35      	ldr	r3, [pc, #212]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	2200      	movs	r2, #0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	617a      	str	r2, [r7, #20]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a7e:	f04f 0b00 	mov.w	fp, #0
 8002a82:	4652      	mov	r2, sl
 8002a84:	465b      	mov	r3, fp
 8002a86:	f04f 0000 	mov.w	r0, #0
 8002a8a:	f04f 0100 	mov.w	r1, #0
 8002a8e:	0159      	lsls	r1, r3, #5
 8002a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a94:	0150      	lsls	r0, r2, #5
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a9e:	eb63 090b 	sbc.w	r9, r3, fp
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002aae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ab2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ab6:	ebb2 0408 	subs.w	r4, r2, r8
 8002aba:	eb63 0509 	sbc.w	r5, r3, r9
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	00eb      	lsls	r3, r5, #3
 8002ac8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002acc:	00e2      	lsls	r2, r4, #3
 8002ace:	4614      	mov	r4, r2
 8002ad0:	461d      	mov	r5, r3
 8002ad2:	eb14 030a 	adds.w	r3, r4, sl
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	eb45 030b 	adc.w	r3, r5, fp
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aea:	4629      	mov	r1, r5
 8002aec:	028b      	lsls	r3, r1, #10
 8002aee:	4621      	mov	r1, r4
 8002af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002af4:	4621      	mov	r1, r4
 8002af6:	028a      	lsls	r2, r1, #10
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afe:	2200      	movs	r2, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	60fa      	str	r2, [r7, #12]
 8002b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b08:	f7fd fb64 	bl	80001d4 <__aeabi_uldivmod>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4613      	mov	r3, r2
 8002b12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3740      	adds	r7, #64	; 0x40
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	017d7840 	.word	0x017d7840

08002b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000000 	.word	0x20000000

08002b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b68:	b084      	sub	sp, #16
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	f107 001c 	add.w	r0, r7, #28
 8002b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d122      	bne.n	8002bc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f001 fbee 	bl	800439c <USB_CoreReset>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	e01a      	b.n	8002bfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f001 fbe2 	bl	800439c <USB_CoreReset>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
 8002bee:	e005      	b.n	8002bfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10b      	bne.n	8002c1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f043 0206 	orr.w	r2, r3, #6
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c26:	b004      	add	sp, #16
 8002c28:	4770      	bx	lr
	...

08002c2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	4613      	mov	r3, r2
 8002c38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d165      	bne.n	8002d0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <USB_SetTurnaroundTime+0x11c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d906      	bls.n	8002c56 <USB_SetTurnaroundTime+0x2a>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4a40      	ldr	r2, [pc, #256]	; (8002d4c <USB_SetTurnaroundTime+0x120>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d202      	bcs.n	8002c56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c50:	230f      	movs	r3, #15
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e062      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4a3c      	ldr	r2, [pc, #240]	; (8002d4c <USB_SetTurnaroundTime+0x120>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d306      	bcc.n	8002c6c <USB_SetTurnaroundTime+0x40>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4a3b      	ldr	r2, [pc, #236]	; (8002d50 <USB_SetTurnaroundTime+0x124>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d202      	bcs.n	8002c6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c66:	230e      	movs	r3, #14
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e057      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4a38      	ldr	r2, [pc, #224]	; (8002d50 <USB_SetTurnaroundTime+0x124>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d306      	bcc.n	8002c82 <USB_SetTurnaroundTime+0x56>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4a37      	ldr	r2, [pc, #220]	; (8002d54 <USB_SetTurnaroundTime+0x128>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d202      	bcs.n	8002c82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c7c:	230d      	movs	r3, #13
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e04c      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a33      	ldr	r2, [pc, #204]	; (8002d54 <USB_SetTurnaroundTime+0x128>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d306      	bcc.n	8002c98 <USB_SetTurnaroundTime+0x6c>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4a32      	ldr	r2, [pc, #200]	; (8002d58 <USB_SetTurnaroundTime+0x12c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d802      	bhi.n	8002c98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c92:	230c      	movs	r3, #12
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e041      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <USB_SetTurnaroundTime+0x12c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d906      	bls.n	8002cae <USB_SetTurnaroundTime+0x82>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4a2e      	ldr	r2, [pc, #184]	; (8002d5c <USB_SetTurnaroundTime+0x130>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d802      	bhi.n	8002cae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ca8:	230b      	movs	r3, #11
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e036      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <USB_SetTurnaroundTime+0x130>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d906      	bls.n	8002cc4 <USB_SetTurnaroundTime+0x98>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4a29      	ldr	r2, [pc, #164]	; (8002d60 <USB_SetTurnaroundTime+0x134>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d802      	bhi.n	8002cc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002cbe:	230a      	movs	r3, #10
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e02b      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a26      	ldr	r2, [pc, #152]	; (8002d60 <USB_SetTurnaroundTime+0x134>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d906      	bls.n	8002cda <USB_SetTurnaroundTime+0xae>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <USB_SetTurnaroundTime+0x138>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d202      	bcs.n	8002cda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002cd4:	2309      	movs	r3, #9
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e020      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <USB_SetTurnaroundTime+0x138>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d306      	bcc.n	8002cf0 <USB_SetTurnaroundTime+0xc4>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <USB_SetTurnaroundTime+0x13c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d802      	bhi.n	8002cf0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002cea:	2308      	movs	r3, #8
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e015      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <USB_SetTurnaroundTime+0x13c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d906      	bls.n	8002d06 <USB_SetTurnaroundTime+0xda>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <USB_SetTurnaroundTime+0x140>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d202      	bcs.n	8002d06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d00:	2307      	movs	r3, #7
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00a      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d06:	2306      	movs	r3, #6
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e007      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d12:	2309      	movs	r3, #9
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e001      	b.n	8002d1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d18:	2309      	movs	r3, #9
 8002d1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002d34:	431a      	orrs	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	00d8acbf 	.word	0x00d8acbf
 8002d4c:	00e4e1c0 	.word	0x00e4e1c0
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	01067380 	.word	0x01067380
 8002d58:	011a499f 	.word	0x011a499f
 8002d5c:	01312cff 	.word	0x01312cff
 8002d60:	014ca43f 	.word	0x014ca43f
 8002d64:	016e3600 	.word	0x016e3600
 8002d68:	01a6ab1f 	.word	0x01a6ab1f
 8002d6c:	01e84800 	.word	0x01e84800

08002d70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f043 0201 	orr.w	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 0201 	bic.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d115      	bne.n	8002e02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7fd fd70 	bl	80008c8 <HAL_Delay>
      ms++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f001 fa45 	bl	800427e <USB_GetMode>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d01e      	beq.n	8002e38 <USB_SetCurrentMode+0x84>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b31      	cmp	r3, #49	; 0x31
 8002dfe:	d9f0      	bls.n	8002de2 <USB_SetCurrentMode+0x2e>
 8002e00:	e01a      	b.n	8002e38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d115      	bne.n	8002e34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e14:	2001      	movs	r0, #1
 8002e16:	f7fd fd57 	bl	80008c8 <HAL_Delay>
      ms++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f001 fa2c 	bl	800427e <USB_GetMode>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <USB_SetCurrentMode+0x84>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b31      	cmp	r3, #49	; 0x31
 8002e30:	d9f0      	bls.n	8002e14 <USB_SetCurrentMode+0x60>
 8002e32:	e001      	b.n	8002e38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e005      	b.n	8002e44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b32      	cmp	r3, #50	; 0x32
 8002e3c:	d101      	bne.n	8002e42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	e009      	b.n	8002e80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	3340      	adds	r3, #64	; 0x40
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	2200      	movs	r2, #0
 8002e78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b0e      	cmp	r3, #14
 8002e84:	d9f2      	bls.n	8002e6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11c      	bne.n	8002ec6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ec4:	e00b      	b.n	8002ede <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef8:	461a      	mov	r2, r3
 8002efa:	680b      	ldr	r3, [r1, #0]
 8002efc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10c      	bne.n	8002f1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d104      	bne.n	8002f14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f965 	bl	80031dc <USB_SetDevSpeed>
 8002f12:	e008      	b.n	8002f26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f14:	2101      	movs	r1, #1
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f960 	bl	80031dc <USB_SetDevSpeed>
 8002f1c:	e003      	b.n	8002f26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f1e:	2103      	movs	r1, #3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f95b 	bl	80031dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f26:	2110      	movs	r1, #16
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f8f3 	bl	8003114 <USB_FlushTxFifo>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f91f 	bl	800317c <USB_FlushRxFifo>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2300      	movs	r3, #0
 8002f52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f66:	461a      	mov	r2, r3
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e043      	b.n	8002ffa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f88:	d118      	bne.n	8002fbc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	e013      	b.n	8002fce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e008      	b.n	8002fce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2300      	movs	r3, #0
 8002fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2300      	movs	r3, #0
 8002fde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fec:	461a      	mov	r2, r3
 8002fee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d3b7      	bcc.n	8002f72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	e043      	b.n	8003090 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800301a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800301e:	d118      	bne.n	8003052 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003032:	461a      	mov	r2, r3
 8003034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e013      	b.n	8003064 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003048:	461a      	mov	r2, r3
 800304a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e008      	b.n	8003064 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	461a      	mov	r2, r3
 8003060:	2300      	movs	r3, #0
 8003062:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003070:	461a      	mov	r2, r3
 8003072:	2300      	movs	r3, #0
 8003074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003082:	461a      	mov	r2, r3
 8003084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003088:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	3301      	adds	r3, #1
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	429a      	cmp	r2, r3
 8003096:	d3b7      	bcc.n	8003008 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80030b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f043 0210 	orr.w	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699a      	ldr	r2, [r3, #24]
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <USB_DevInit+0x2c4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80030d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f043 0208 	orr.w	r2, r3, #8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003100:	7dfb      	ldrb	r3, [r7, #23]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800310c:	b004      	add	sp, #16
 800310e:	4770      	bx	lr
 8003110:	803c3800 	.word	0x803c3800

08003114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3301      	adds	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a13      	ldr	r2, [pc, #76]	; (8003178 <USB_FlushTxFifo+0x64>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e01b      	b.n	800316c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	daf2      	bge.n	8003122 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	019b      	lsls	r3, r3, #6
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3301      	adds	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a08      	ldr	r2, [pc, #32]	; (8003178 <USB_FlushTxFifo+0x64>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e006      	b.n	800316c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d0f0      	beq.n	800314c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	00030d40 	.word	0x00030d40

0800317c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3301      	adds	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <USB_FlushRxFifo+0x5c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e018      	b.n	80031cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	daf2      	bge.n	8003188 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2210      	movs	r2, #16
 80031aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3301      	adds	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <USB_FlushRxFifo+0x5c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e006      	b.n	80031cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d0f0      	beq.n	80031ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	00030d40 	.word	0x00030d40

080031dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	68f9      	ldr	r1, [r7, #12]
 80031f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800320e:	b480      	push	{r7}
 8003210:	b087      	sub	sp, #28
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0306 	and.w	r3, r3, #6
 8003226:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d102      	bne.n	8003234 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
 8003232:	e00a      	b.n	800324a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d002      	beq.n	8003240 <USB_GetDevSpeed+0x32>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d102      	bne.n	8003246 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003240:	2302      	movs	r3, #2
 8003242:	75fb      	strb	r3, [r7, #23]
 8003244:	e001      	b.n	800324a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003246:	230f      	movs	r3, #15
 8003248:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800324a:	7dfb      	ldrb	r3, [r7, #23]
}
 800324c:	4618      	mov	r0, r3
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d13a      	bne.n	80032ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	b29b      	uxth	r3, r3
 800328c:	68f9      	ldr	r1, [r7, #12]
 800328e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003292:	4313      	orrs	r3, r2
 8003294:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d155      	bne.n	8003358 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	791b      	ldrb	r3, [r3, #4]
 80032c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	059b      	lsls	r3, r3, #22
 80032ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032d0:	4313      	orrs	r3, r2
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	0151      	lsls	r1, r2, #5
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	440a      	add	r2, r1
 80032da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	e036      	b.n	8003358 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	2101      	movs	r1, #1
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	68f9      	ldr	r1, [r7, #12]
 8003304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003308:	4313      	orrs	r3, r2
 800330a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d11a      	bne.n	8003358 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	791b      	ldrb	r3, [r3, #4]
 800333c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800333e:	430b      	orrs	r3, r1
 8003340:	4313      	orrs	r3, r2
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	0151      	lsls	r1, r2, #5
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	440a      	add	r2, r1
 800334a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003356:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	785b      	ldrb	r3, [r3, #1]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d161      	bne.n	8003448 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800339a:	d11f      	bne.n	80033dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	0151      	lsls	r1, r2, #5
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	440a      	add	r2, r1
 80033b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	0151      	lsls	r1, r2, #5
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	440a      	add	r2, r1
 80033d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	2101      	movs	r1, #1
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033fc:	4013      	ands	r3, r2
 80033fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	b29b      	uxth	r3, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003420:	4013      	ands	r3, r2
 8003422:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	0159      	lsls	r1, r3, #5
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	440b      	add	r3, r1
 800343a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343e:	4619      	mov	r1, r3
 8003440:	4b35      	ldr	r3, [pc, #212]	; (8003518 <USB_DeactivateEndpoint+0x1b0>)
 8003442:	4013      	ands	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
 8003446:	e060      	b.n	800350a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800345a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800345e:	d11f      	bne.n	80034a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	0151      	lsls	r1, r2, #5
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	440a      	add	r2, r1
 8003476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800347a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800347e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	0151      	lsls	r1, r2, #5
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	440a      	add	r2, r1
 8003496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800349a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800349e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	041b      	lsls	r3, r3, #16
 80034b8:	43db      	mvns	r3, r3
 80034ba:	68f9      	ldr	r1, [r7, #12]
 80034bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034c0:	4013      	ands	r3, r2
 80034c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	43db      	mvns	r3, r3
 80034de:	68f9      	ldr	r1, [r7, #12]
 80034e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034e4:	4013      	ands	r3, r2
 80034e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	0159      	lsls	r1, r3, #5
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	440b      	add	r3, r1
 80034fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003502:	4619      	mov	r1, r3
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <USB_DeactivateEndpoint+0x1b4>)
 8003506:	4013      	ands	r3, r2
 8003508:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	ec337800 	.word	0xec337800
 800351c:	eff37800 	.word	0xeff37800

08003520 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 815c 	bne.w	80037fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d132      	bne.n	80035b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	0151      	lsls	r1, r2, #5
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	440a      	add	r2, r1
 8003560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800356c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	0151      	lsls	r1, r2, #5
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	440a      	add	r2, r1
 8003584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800358c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	0151      	lsls	r1, r2, #5
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	440a      	add	r2, r1
 80035a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a8:	0cdb      	lsrs	r3, r3, #19
 80035aa:	04db      	lsls	r3, r3, #19
 80035ac:	6113      	str	r3, [r2, #16]
 80035ae:	e074      	b.n	800369a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	0151      	lsls	r1, r2, #5
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	440a      	add	r2, r1
 80035c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035ca:	0cdb      	lsrs	r3, r3, #19
 80035cc:	04db      	lsls	r3, r3, #19
 80035ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	0151      	lsls	r1, r2, #5
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	440a      	add	r2, r1
 80035e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003600:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	6999      	ldr	r1, [r3, #24]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	440b      	add	r3, r1
 800360c:	1e59      	subs	r1, r3, #1
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	fbb1 f3f3 	udiv	r3, r1, r3
 8003616:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003618:	4b9d      	ldr	r3, [pc, #628]	; (8003890 <USB_EPStartXfer+0x370>)
 800361a:	400b      	ands	r3, r1
 800361c:	69b9      	ldr	r1, [r7, #24]
 800361e:	0148      	lsls	r0, r1, #5
 8003620:	69f9      	ldr	r1, [r7, #28]
 8003622:	4401      	add	r1, r0
 8003624:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003628:	4313      	orrs	r3, r2
 800362a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	0148      	lsls	r0, r1, #5
 8003646:	69f9      	ldr	r1, [r7, #28]
 8003648:	4401      	add	r1, r0
 800364a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800364e:	4313      	orrs	r3, r2
 8003650:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	791b      	ldrb	r3, [r3, #4]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d11f      	bne.n	800369a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	0151      	lsls	r1, r2, #5
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	440a      	add	r2, r1
 8003670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003674:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003678:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	440a      	add	r2, r1
 8003690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003698:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d14b      	bne.n	8003738 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b4:	461a      	mov	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	791b      	ldrb	r3, [r3, #4]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d128      	bne.n	8003716 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d110      	bne.n	80036f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	0151      	lsls	r1, r2, #5
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	440a      	add	r2, r1
 80036ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e00f      	b.n	8003716 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	0151      	lsls	r1, r2, #5
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	440a      	add	r2, r1
 800370c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003714:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	0151      	lsls	r1, r2, #5
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	440a      	add	r2, r1
 800372c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003730:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e133      	b.n	80039a0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	0151      	lsls	r1, r2, #5
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	440a      	add	r2, r1
 800374e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003756:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	791b      	ldrb	r3, [r3, #4]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d015      	beq.n	800378c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 811b 	beq.w	80039a0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	2101      	movs	r1, #1
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	69f9      	ldr	r1, [r7, #28]
 8003782:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003786:	4313      	orrs	r3, r2
 8003788:	634b      	str	r3, [r1, #52]	; 0x34
 800378a:	e109      	b.n	80039a0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d110      	bne.n	80037be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	0151      	lsls	r1, r2, #5
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	440a      	add	r2, r1
 80037b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	e00f      	b.n	80037de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	0151      	lsls	r1, r2, #5
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	440a      	add	r2, r1
 80037d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	6919      	ldr	r1, [r3, #16]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	b298      	uxth	r0, r3
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	4603      	mov	r3, r0
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fade 	bl	8003db4 <USB_WritePacket>
 80037f8:	e0d2      	b.n	80039a0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	0151      	lsls	r1, r2, #5
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	440a      	add	r2, r1
 8003810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003814:	0cdb      	lsrs	r3, r3, #19
 8003816:	04db      	lsls	r3, r3, #19
 8003818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	0151      	lsls	r1, r2, #5
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	440a      	add	r2, r1
 8003830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800383c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d126      	bne.n	8003894 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385c:	69b9      	ldr	r1, [r7, #24]
 800385e:	0148      	lsls	r0, r1, #5
 8003860:	69f9      	ldr	r1, [r7, #28]
 8003862:	4401      	add	r1, r0
 8003864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003868:	4313      	orrs	r3, r2
 800386a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	0151      	lsls	r1, r2, #5
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	440a      	add	r2, r1
 8003882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800388a:	6113      	str	r3, [r2, #16]
 800388c:	e03a      	b.n	8003904 <USB_EPStartXfer+0x3e4>
 800388e:	bf00      	nop
 8003890:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4413      	add	r3, r2
 800389e:	1e5a      	subs	r2, r3, #1
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	8afa      	ldrh	r2, [r7, #22]
 80038b0:	fb03 f202 	mul.w	r2, r3, r2
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	8afb      	ldrh	r3, [r7, #22]
 80038c8:	04d9      	lsls	r1, r3, #19
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <USB_EPStartXfer+0x48c>)
 80038cc:	400b      	ands	r3, r1
 80038ce:	69b9      	ldr	r1, [r7, #24]
 80038d0:	0148      	lsls	r0, r1, #5
 80038d2:	69f9      	ldr	r1, [r7, #28]
 80038d4:	4401      	add	r1, r0
 80038d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038da:	4313      	orrs	r3, r2
 80038dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	69b9      	ldr	r1, [r7, #24]
 80038f6:	0148      	lsls	r0, r1, #5
 80038f8:	69f9      	ldr	r1, [r7, #28]
 80038fa:	4401      	add	r1, r0
 80038fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003900:	4313      	orrs	r3, r2
 8003902:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d10d      	bne.n	8003926 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6919      	ldr	r1, [r3, #16]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	460a      	mov	r2, r1
 8003924:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	791b      	ldrb	r3, [r3, #4]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d128      	bne.n	8003980 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d110      	bne.n	8003960 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	0151      	lsls	r1, r2, #5
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	440a      	add	r2, r1
 8003954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e00f      	b.n	8003980 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	0151      	lsls	r1, r2, #5
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	440a      	add	r2, r1
 8003976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	0151      	lsls	r1, r2, #5
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	440a      	add	r2, r1
 8003996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800399a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800399e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	1ff80000 	.word	0x1ff80000

080039b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	785b      	ldrb	r3, [r3, #1]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 80ce 	bne.w	8003b6e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d132      	bne.n	8003a40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	0151      	lsls	r1, r2, #5
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	440a      	add	r2, r1
 8003a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a38:	0cdb      	lsrs	r3, r3, #19
 8003a3a:	04db      	lsls	r3, r3, #19
 8003a3c:	6113      	str	r3, [r2, #16]
 8003a3e:	e04e      	b.n	8003ade <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	0151      	lsls	r1, r2, #5
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	440a      	add	r2, r1
 8003a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a5a:	0cdb      	lsrs	r3, r3, #19
 8003a5c:	04db      	lsls	r3, r3, #19
 8003a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d903      	bls.n	8003a98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	0151      	lsls	r1, r2, #5
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	440a      	add	r2, r1
 8003aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ace:	6939      	ldr	r1, [r7, #16]
 8003ad0:	0148      	lsls	r0, r1, #5
 8003ad2:	6979      	ldr	r1, [r7, #20]
 8003ad4:	4401      	add	r1, r0
 8003ad6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d11e      	bne.n	8003b22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	461a      	mov	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	0151      	lsls	r1, r2, #5
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	440a      	add	r2, r1
 8003b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	e097      	b.n	8003c52 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	0151      	lsls	r1, r2, #5
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	440a      	add	r2, r1
 8003b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8083 	beq.w	8003c52 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	6979      	ldr	r1, [r7, #20]
 8003b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	634b      	str	r3, [r1, #52]	; 0x34
 8003b6c:	e071      	b.n	8003c52 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	0151      	lsls	r1, r2, #5
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	440a      	add	r2, r1
 8003b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b88:	0cdb      	lsrs	r3, r3, #19
 8003b8a:	04db      	lsls	r3, r3, #19
 8003b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	0151      	lsls	r1, r2, #5
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	440a      	add	r2, r1
 8003ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003be8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c00:	6939      	ldr	r1, [r7, #16]
 8003c02:	0148      	lsls	r0, r1, #5
 8003c04:	6979      	ldr	r1, [r7, #20]
 8003c06:	4401      	add	r1, r0
 8003c08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d10d      	bne.n	8003c32 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6919      	ldr	r1, [r3, #16]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2e:	460a      	mov	r2, r1
 8003c30:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	0151      	lsls	r1, r2, #5
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	440a      	add	r2, r1
 8003c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	785b      	ldrb	r3, [r3, #1]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d14a      	bne.n	8003d14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c96:	f040 8086 	bne.w	8003da6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d902      	bls.n	8003cf8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8003cf6:	e056      	b.n	8003da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d10:	d0e7      	beq.n	8003ce2 <USB_EPStopXfer+0x82>
 8003d12:	e048      	b.n	8003da6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d2c:	d13b      	bne.n	8003da6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	7812      	ldrb	r2, [r2, #0]
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d902      	bls.n	8003d8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
          break;
 8003d8a:	e00c      	b.n	8003da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da4:	d0e7      	beq.n	8003d76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	71fb      	strb	r3, [r7, #7]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d123      	bne.n	8003e22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003dda:	88bb      	ldrh	r3, [r7, #4]
 8003ddc:	3303      	adds	r3, #3
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e018      	b.n	8003e1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	031a      	lsls	r2, r3, #12
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	461a      	mov	r2, r3
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3301      	adds	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3e2      	bcc.n	8003de8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3724      	adds	r7, #36	; 0x24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b08b      	sub	sp, #44	; 0x2c
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	623b      	str	r3, [r7, #32]
 8003e5a:	e014      	b.n	8003e86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	3301      	adds	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	3301      	adds	r3, #1
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	3301      	adds	r3, #1
 8003e84:	623b      	str	r3, [r7, #32]
 8003e86:	6a3a      	ldr	r2, [r7, #32]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d3e6      	bcc.n	8003e5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e8e:	8bfb      	ldrh	r3, [r7, #30]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01e      	beq.n	8003ed2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f107 0310 	add.w	r3, r7, #16
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	701a      	strb	r2, [r3, #0]
      i++;
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003ec6:	8bfb      	ldrh	r3, [r7, #30]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ecc:	8bfb      	ldrh	r3, [r7, #30]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1ea      	bne.n	8003ea8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	372c      	adds	r7, #44	; 0x2c
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d12c      	bne.n	8003f56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	db12      	blt.n	8003f34 <USB_EPSetStall+0x54>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00f      	beq.n	8003f34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	0151      	lsls	r1, r2, #5
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	440a      	add	r2, r1
 8003f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	e02b      	b.n	8003fae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	db12      	blt.n	8003f8e <USB_EPSetStall+0xae>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00f      	beq.n	8003f8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	0151      	lsls	r1, r2, #5
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	440a      	add	r2, r1
 8003fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d128      	bne.n	800402a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ff6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	791b      	ldrb	r3, [r3, #4]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d003      	beq.n	8004008 <USB_EPClearStall+0x4c>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	791b      	ldrb	r3, [r3, #4]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d138      	bne.n	800407a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	e027      	b.n	800407a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	0151      	lsls	r1, r2, #5
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	440a      	add	r2, r1
 8004040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004048:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	791b      	ldrb	r3, [r3, #4]
 800404e:	2b03      	cmp	r3, #3
 8004050:	d003      	beq.n	800405a <USB_EPClearStall+0x9e>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	791b      	ldrb	r3, [r3, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d10f      	bne.n	800407a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	0151      	lsls	r1, r2, #5
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	440a      	add	r2, r1
 8004070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004078:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004102:	f023 0302 	bic.w	r3, r3, #2
 8004106:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004130:	f023 0303 	bic.w	r3, r3, #3
 8004134:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004170:	68fb      	ldr	r3, [r7, #12]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	0c1b      	lsrs	r3, r3, #16
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	4013      	ands	r3, r2
 80041d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	b29b      	uxth	r3, r3
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	4013      	ands	r3, r2
 8004212:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004214:	68bb      	ldr	r3, [r7, #8]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004222:	b480      	push	{r7}
 8004224:	b087      	sub	sp, #28
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004244:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	fa22 f303 	lsr.w	r3, r2, r3
 8004252:	01db      	lsls	r3, r3, #7
 8004254:	b2db      	uxtb	r3, r3
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4013      	ands	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004270:	68bb      	ldr	r3, [r7, #8]
}
 8004272:	4618      	mov	r0, r3
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0301 	and.w	r3, r3, #1
}
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042b8:	f023 0307 	bic.w	r3, r3, #7
 80042bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	460b      	mov	r3, r1
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	333c      	adds	r3, #60	; 0x3c
 80042f6:	3304      	adds	r3, #4
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4a26      	ldr	r2, [pc, #152]	; (8004398 <USB_EP0_OutStart+0xb8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d90a      	bls.n	800431a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004314:	d101      	bne.n	800431a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e037      	b.n	800438a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004320:	461a      	mov	r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004348:	f043 0318 	orr.w	r3, r3, #24
 800434c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800435c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004360:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004362:	7afb      	ldrb	r3, [r7, #11]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d10f      	bne.n	8004388 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004382:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	4f54300a 	.word	0x4f54300a

0800439c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3301      	adds	r3, #1
 80043ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a13      	ldr	r2, [pc, #76]	; (8004400 <USB_CoreReset+0x64>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e01b      	b.n	80043f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	daf2      	bge.n	80043a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a09      	ldr	r2, [pc, #36]	; (8004400 <USB_CoreReset+0x64>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e006      	b.n	80043f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d0f0      	beq.n	80043d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	00030d40 	.word	0x00030d40

08004404 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004410:	2010      	movs	r0, #16
 8004412:	f002 f911 	bl	8006638 <USBD_static_malloc>
 8004416:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	32b0      	adds	r2, #176	; 0xb0
 8004428:	2100      	movs	r1, #0
 800442a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800442e:	2302      	movs	r3, #2
 8004430:	e048      	b.n	80044c4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	32b0      	adds	r2, #176	; 0xb0
 800443c:	68f9      	ldr	r1, [r7, #12]
 800443e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	32b0      	adds	r2, #176	; 0xb0
 800444c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	7c1b      	ldrb	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800445e:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <USBD_HID_Init+0xc8>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	f003 020f 	and.w	r2, r3, #15
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	3326      	adds	r3, #38	; 0x26
 8004474:	2207      	movs	r2, #7
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	e00c      	b.n	8004494 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800447a:	4b14      	ldr	r3, [pc, #80]	; (80044cc <USBD_HID_Init+0xc8>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	3326      	adds	r3, #38	; 0x26
 8004490:	220a      	movs	r2, #10
 8004492:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004494:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <USBD_HID_Init+0xc8>)
 8004496:	7819      	ldrb	r1, [r3, #0]
 8004498:	2304      	movs	r3, #4
 800449a:	2203      	movs	r2, #3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f001 ffba 	bl	8006416 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <USBD_HID_Init+0xc8>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	f003 020f 	and.w	r2, r3, #15
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	3324      	adds	r3, #36	; 0x24
 80044b8:	2201      	movs	r2, #1
 80044ba:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	200000bf 	.word	0x200000bf

080044d0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80044dc:	4b1f      	ldr	r3, [pc, #124]	; (800455c <USBD_HID_DeInit+0x8c>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	4619      	mov	r1, r3
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f001 ffbd 	bl	8006462 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80044e8:	4b1c      	ldr	r3, [pc, #112]	; (800455c <USBD_HID_DeInit+0x8c>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	f003 020f 	and.w	r2, r3, #15
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	3324      	adds	r3, #36	; 0x24
 80044fe:	2200      	movs	r2, #0
 8004500:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004502:	4b16      	ldr	r3, [pc, #88]	; (800455c <USBD_HID_DeInit+0x8c>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	f003 020f 	and.w	r2, r3, #15
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	3326      	adds	r3, #38	; 0x26
 8004518:	2200      	movs	r2, #0
 800451a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	32b0      	adds	r2, #176	; 0xb0
 8004526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d011      	beq.n	8004552 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	32b0      	adds	r2, #176	; 0xb0
 8004538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453c:	4618      	mov	r0, r3
 800453e:	f002 f889 	bl	8006654 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	32b0      	adds	r2, #176	; 0xb0
 800454c:	2100      	movs	r1, #0
 800454e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	200000bf 	.word	0x200000bf

08004560 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	32b0      	adds	r2, #176	; 0xb0
 8004574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004578:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004588:	2303      	movs	r3, #3
 800458a:	e0e8      	b.n	800475e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004594:	2b00      	cmp	r3, #0
 8004596:	d046      	beq.n	8004626 <USBD_HID_Setup+0xc6>
 8004598:	2b20      	cmp	r3, #32
 800459a:	f040 80d8 	bne.w	800474e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	3b02      	subs	r3, #2
 80045a4:	2b09      	cmp	r3, #9
 80045a6:	d836      	bhi.n	8004616 <USBD_HID_Setup+0xb6>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <USBD_HID_Setup+0x50>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	08004607 	.word	0x08004607
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	08004617 	.word	0x08004617
 80045bc:	08004617 	.word	0x08004617
 80045c0:	08004617 	.word	0x08004617
 80045c4:	08004617 	.word	0x08004617
 80045c8:	08004617 	.word	0x08004617
 80045cc:	08004617 	.word	0x08004617
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	080045d9 	.word	0x080045d9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	885b      	ldrh	r3, [r3, #2]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	601a      	str	r2, [r3, #0]
          break;
 80045e4:	e01e      	b.n	8004624 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f001 fbd5 	bl	8005d9c <USBD_CtlSendData>
          break;
 80045f2:	e017      	b.n	8004624 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	885b      	ldrh	r3, [r3, #2]
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	461a      	mov	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	605a      	str	r2, [r3, #4]
          break;
 8004604:	e00e      	b.n	8004624 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3304      	adds	r3, #4
 800460a:	2201      	movs	r2, #1
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f001 fbc4 	bl	8005d9c <USBD_CtlSendData>
          break;
 8004614:	e006      	b.n	8004624 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f001 fb4e 	bl	8005cba <USBD_CtlError>
          ret = USBD_FAIL;
 800461e:	2303      	movs	r3, #3
 8004620:	75fb      	strb	r3, [r7, #23]
          break;
 8004622:	bf00      	nop
      }
      break;
 8004624:	e09a      	b.n	800475c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	2b0b      	cmp	r3, #11
 800462c:	f200 8086 	bhi.w	800473c <USBD_HID_Setup+0x1dc>
 8004630:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <USBD_HID_Setup+0xd8>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	08004669 	.word	0x08004669
 800463c:	0800474b 	.word	0x0800474b
 8004640:	0800473d 	.word	0x0800473d
 8004644:	0800473d 	.word	0x0800473d
 8004648:	0800473d 	.word	0x0800473d
 800464c:	0800473d 	.word	0x0800473d
 8004650:	08004693 	.word	0x08004693
 8004654:	0800473d 	.word	0x0800473d
 8004658:	0800473d 	.word	0x0800473d
 800465c:	0800473d 	.word	0x0800473d
 8004660:	080046eb 	.word	0x080046eb
 8004664:	08004715 	.word	0x08004715
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b03      	cmp	r3, #3
 8004672:	d107      	bne.n	8004684 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004674:	f107 030a 	add.w	r3, r7, #10
 8004678:	2202      	movs	r2, #2
 800467a:	4619      	mov	r1, r3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f001 fb8d 	bl	8005d9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004682:	e063      	b.n	800474c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f001 fb17 	bl	8005cba <USBD_CtlError>
            ret = USBD_FAIL;
 800468c:	2303      	movs	r3, #3
 800468e:	75fb      	strb	r3, [r7, #23]
          break;
 8004690:	e05c      	b.n	800474c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	885b      	ldrh	r3, [r3, #2]
 8004696:	0a1b      	lsrs	r3, r3, #8
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b22      	cmp	r3, #34	; 0x22
 800469c:	d108      	bne.n	80046b0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	88db      	ldrh	r3, [r3, #6]
 80046a2:	2b3f      	cmp	r3, #63	; 0x3f
 80046a4:	bf28      	it	cs
 80046a6:	233f      	movcs	r3, #63	; 0x3f
 80046a8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80046aa:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <USBD_HID_Setup+0x208>)
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	e015      	b.n	80046dc <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	885b      	ldrh	r3, [r3, #2]
 80046b4:	0a1b      	lsrs	r3, r3, #8
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b21      	cmp	r3, #33	; 0x21
 80046ba:	d108      	bne.n	80046ce <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <USBD_HID_Setup+0x20c>)
 80046be:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	88db      	ldrh	r3, [r3, #6]
 80046c4:	2b09      	cmp	r3, #9
 80046c6:	bf28      	it	cs
 80046c8:	2309      	movcs	r3, #9
 80046ca:	82bb      	strh	r3, [r7, #20]
 80046cc:	e006      	b.n	80046dc <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f001 faf2 	bl	8005cba <USBD_CtlError>
            ret = USBD_FAIL;
 80046d6:	2303      	movs	r3, #3
 80046d8:	75fb      	strb	r3, [r7, #23]
            break;
 80046da:	e037      	b.n	800474c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80046dc:	8abb      	ldrh	r3, [r7, #20]
 80046de:	461a      	mov	r2, r3
 80046e0:	6939      	ldr	r1, [r7, #16]
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f001 fb5a 	bl	8005d9c <USBD_CtlSendData>
          break;
 80046e8:	e030      	b.n	800474c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d107      	bne.n	8004706 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3308      	adds	r3, #8
 80046fa:	2201      	movs	r2, #1
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f001 fb4c 	bl	8005d9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004704:	e022      	b.n	800474c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f001 fad6 	bl	8005cba <USBD_CtlError>
            ret = USBD_FAIL;
 800470e:	2303      	movs	r3, #3
 8004710:	75fb      	strb	r3, [r7, #23]
          break;
 8004712:	e01b      	b.n	800474c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b03      	cmp	r3, #3
 800471e:	d106      	bne.n	800472e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	885b      	ldrh	r3, [r3, #2]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800472c:	e00e      	b.n	800474c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f001 fac2 	bl	8005cba <USBD_CtlError>
            ret = USBD_FAIL;
 8004736:	2303      	movs	r3, #3
 8004738:	75fb      	strb	r3, [r7, #23]
          break;
 800473a:	e007      	b.n	800474c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f001 fabb 	bl	8005cba <USBD_CtlError>
          ret = USBD_FAIL;
 8004744:	2303      	movs	r3, #3
 8004746:	75fb      	strb	r3, [r7, #23]
          break;
 8004748:	e000      	b.n	800474c <USBD_HID_Setup+0x1ec>
          break;
 800474a:	bf00      	nop
      }
      break;
 800474c:	e006      	b.n	800475c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800474e:	6839      	ldr	r1, [r7, #0]
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f001 fab2 	bl	8005cba <USBD_CtlError>
      ret = USBD_FAIL;
 8004756:	2303      	movs	r3, #3
 8004758:	75fb      	strb	r3, [r7, #23]
      break;
 800475a:	bf00      	nop
  }

  return (uint8_t)ret;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000080 	.word	0x20000080
 800476c:	20000068 	.word	0x20000068

08004770 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	32b0      	adds	r2, #176	; 0xb0
 8004788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004794:	2303      	movs	r3, #3
 8004796:	e014      	b.n	80047c2 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d10d      	bne.n	80047c0 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	7b1b      	ldrb	r3, [r3, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2201      	movs	r2, #1
 80047b0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <USBD_HID_SendReport+0x5c>)
 80047b4:	7819      	ldrb	r1, [r3, #0]
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f001 fef9 	bl	80065b2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200000bf 	.word	0x200000bf

080047d0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80047d8:	2181      	movs	r1, #129	; 0x81
 80047da:	4809      	ldr	r0, [pc, #36]	; (8004800 <USBD_HID_GetFSCfgDesc+0x30>)
 80047dc:	f000 fc35 	bl	800504a <USBD_GetEpDesc>
 80047e0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	220a      	movs	r2, #10
 80047ec:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2222      	movs	r2, #34	; 0x22
 80047f2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80047f4:	4b02      	ldr	r3, [pc, #8]	; (8004800 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000044 	.word	0x20000044

08004804 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800480c:	2181      	movs	r1, #129	; 0x81
 800480e:	4809      	ldr	r0, [pc, #36]	; (8004834 <USBD_HID_GetHSCfgDesc+0x30>)
 8004810:	f000 fc1b 	bl	800504a <USBD_GetEpDesc>
 8004814:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2207      	movs	r2, #7
 8004820:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2222      	movs	r2, #34	; 0x22
 8004826:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004828:	4b02      	ldr	r3, [pc, #8]	; (8004834 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000044 	.word	0x20000044

08004838 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004840:	2181      	movs	r1, #129	; 0x81
 8004842:	4809      	ldr	r0, [pc, #36]	; (8004868 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8004844:	f000 fc01 	bl	800504a <USBD_GetEpDesc>
 8004848:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	220a      	movs	r2, #10
 8004854:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2222      	movs	r2, #34	; 0x22
 800485a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800485c:	4b02      	ldr	r3, [pc, #8]	; (8004868 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000044 	.word	0x20000044

0800486c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	32b0      	adds	r2, #176	; 0xb0
 8004882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004886:	2200      	movs	r2, #0
 8004888:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	220a      	movs	r2, #10
 80048a4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80048a6:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	20000074 	.word	0x20000074

080048b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e01f      	b.n	8004910 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	79fa      	ldrb	r2, [r7, #7]
 8004902:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f001 fd1f 	bl	8006348 <USBD_LL_Init>
 800490a:	4603      	mov	r3, r0
 800490c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800490e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800492c:	2303      	movs	r3, #3
 800492e:	e025      	b.n	800497c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	32ae      	adds	r2, #174	; 0xae
 8004942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00f      	beq.n	800496c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	32ae      	adds	r2, #174	; 0xae
 8004956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	f107 020e 	add.w	r2, r7, #14
 8004960:	4610      	mov	r0, r2
 8004962:	4798      	blx	r3
 8004964:	4602      	mov	r2, r0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f001 fd27 	bl	80063e0 <USBD_LL_Start>
 8004992:	4603      	mov	r3, r0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80049a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	4611      	mov	r1, r2
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
 80049dc:	4603      	mov	r3, r0
 80049de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	460b      	mov	r3, r1
 80049f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	4611      	mov	r1, r2
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004a10:	2303      	movs	r3, #3
 8004a12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 f908 	bl	8005c46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004a44:	461a      	mov	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d01a      	beq.n	8004a90 <USBD_LL_SetupStage+0x72>
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d822      	bhi.n	8004aa4 <USBD_LL_SetupStage+0x86>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <USBD_LL_SetupStage+0x4a>
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d00a      	beq.n	8004a7c <USBD_LL_SetupStage+0x5e>
 8004a66:	e01d      	b.n	8004aa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fb5f 	bl	8005134 <USBD_StdDevReq>
 8004a76:	4603      	mov	r3, r0
 8004a78:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7a:	e020      	b.n	8004abe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fbc7 	bl	8005218 <USBD_StdItfReq>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8e:	e016      	b.n	8004abe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fc29 	bl	80052f0 <USBD_StdEPReq>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa2:	e00c      	b.n	8004abe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004aaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f001 fcf4 	bl	80064a0 <USBD_LL_StallEP>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]
      break;
 8004abc:	bf00      	nop
  }

  return ret;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004ada:	7afb      	ldrb	r3, [r7, #11]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d16e      	bne.n	8004bbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004ae6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	f040 8098 	bne.w	8004c24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d913      	bls.n	8004b28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	1ad2      	subs	r2, r2, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4293      	cmp	r3, r2
 8004b18:	bf28      	it	cs
 8004b1a:	4613      	movcs	r3, r2
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f001 f967 	bl	8005df4 <USBD_CtlContinueRx>
 8004b26:	e07d      	b.n	8004c24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d014      	beq.n	8004b60 <USBD_LL_DataOutStage+0x98>
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d81d      	bhi.n	8004b76 <USBD_LL_DataOutStage+0xae>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <USBD_LL_DataOutStage+0x7c>
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d003      	beq.n	8004b4a <USBD_LL_DataOutStage+0x82>
 8004b42:	e018      	b.n	8004b76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	75bb      	strb	r3, [r7, #22]
            break;
 8004b48:	e018      	b.n	8004b7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	4619      	mov	r1, r3
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 fa5e 	bl	8005016 <USBD_CoreFindIF>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	75bb      	strb	r3, [r7, #22]
            break;
 8004b5e:	e00d      	b.n	8004b7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	4619      	mov	r1, r3
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fa60 	bl	8005030 <USBD_CoreFindEP>
 8004b70:	4603      	mov	r3, r0
 8004b72:	75bb      	strb	r3, [r7, #22]
            break;
 8004b74:	e002      	b.n	8004b7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75bb      	strb	r3, [r7, #22]
            break;
 8004b7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004b7c:	7dbb      	ldrb	r3, [r7, #22]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d119      	bne.n	8004bb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d113      	bne.n	8004bb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004b8e:	7dba      	ldrb	r2, [r7, #22]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	32ae      	adds	r2, #174	; 0xae
 8004b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004b9e:	7dba      	ldrb	r2, [r7, #22]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004ba6:	7dba      	ldrb	r2, [r7, #22]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	32ae      	adds	r2, #174	; 0xae
 8004bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f001 f92d 	bl	8005e16 <USBD_CtlSendStatus>
 8004bbc:	e032      	b.n	8004c24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004bbe:	7afb      	ldrb	r3, [r7, #11]
 8004bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa31 	bl	8005030 <USBD_CoreFindEP>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004bd2:	7dbb      	ldrb	r3, [r7, #22]
 8004bd4:	2bff      	cmp	r3, #255	; 0xff
 8004bd6:	d025      	beq.n	8004c24 <USBD_LL_DataOutStage+0x15c>
 8004bd8:	7dbb      	ldrb	r3, [r7, #22]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d122      	bne.n	8004c24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d117      	bne.n	8004c1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004bea:	7dba      	ldrb	r2, [r7, #22]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	32ae      	adds	r2, #174	; 0xae
 8004bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00f      	beq.n	8004c1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004bfa:	7dba      	ldrb	r2, [r7, #22]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004c02:	7dba      	ldrb	r2, [r7, #22]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	32ae      	adds	r2, #174	; 0xae
 8004c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	7afa      	ldrb	r2, [r7, #11]
 8004c10:	4611      	mov	r1, r2
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	4798      	blx	r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	e000      	b.n	8004c26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b086      	sub	sp, #24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	460b      	mov	r3, r1
 8004c38:	607a      	str	r2, [r7, #4]
 8004c3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004c3c:	7afb      	ldrb	r3, [r7, #11]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d16f      	bne.n	8004d22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3314      	adds	r3, #20
 8004c46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d15a      	bne.n	8004d08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d914      	bls.n	8004c88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	1ad2      	subs	r2, r2, r3
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	461a      	mov	r2, r3
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f001 f8ac 	bl	8005dd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2100      	movs	r1, #0
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f001 fcb7 	bl	80065f4 <USBD_LL_PrepareReceive>
 8004c86:	e03f      	b.n	8004d08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d11c      	bne.n	8004cce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d316      	bcc.n	8004cce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d20f      	bcs.n	8004cce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f001 f88d 	bl	8005dd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f001 fc94 	bl	80065f4 <USBD_LL_PrepareReceive>
 8004ccc:	e01c      	b.n	8004d08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d10f      	bne.n	8004cfa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f001 fbcf 	bl	80064a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f001 f89a 	bl	8005e3c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d03a      	beq.n	8004d88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff fe42 	bl	800499c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004d20:	e032      	b.n	8004d88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f97f 	bl	8005030 <USBD_CoreFindEP>
 8004d32:	4603      	mov	r3, r0
 8004d34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2bff      	cmp	r3, #255	; 0xff
 8004d3a:	d025      	beq.n	8004d88 <USBD_LL_DataInStage+0x15a>
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d122      	bne.n	8004d88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d11c      	bne.n	8004d88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004d4e:	7dfa      	ldrb	r2, [r7, #23]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	32ae      	adds	r2, #174	; 0xae
 8004d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d014      	beq.n	8004d88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004d5e:	7dfa      	ldrb	r2, [r7, #23]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004d66:	7dfa      	ldrb	r2, [r7, #23]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	32ae      	adds	r2, #174	; 0xae
 8004d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	7afa      	ldrb	r2, [r7, #11]
 8004d74:	4611      	mov	r1, r2
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	4798      	blx	r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004d7e:	7dbb      	ldrb	r3, [r7, #22]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004d84:	7dbb      	ldrb	r3, [r7, #22]
 8004d86:	e000      	b.n	8004d8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d014      	beq.n	8004df8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00e      	beq.n	8004df8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6852      	ldr	r2, [r2, #4]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	4611      	mov	r1, r2
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	4798      	blx	r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004df4:	2303      	movs	r3, #3
 8004df6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004df8:	2340      	movs	r3, #64	; 0x40
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f001 fb09 	bl	8006416 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e14:	2340      	movs	r3, #64	; 0x40
 8004e16:	2200      	movs	r2, #0
 8004e18:	2180      	movs	r1, #128	; 0x80
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 fafb 	bl	8006416 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2240      	movs	r2, #64	; 0x40
 8004e2a:	621a      	str	r2, [r3, #32]

  return ret;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d106      	bne.n	8004ea4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d110      	bne.n	8004ee8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	32ae      	adds	r2, #174	; 0xae
 8004f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e01c      	b.n	8004f4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d115      	bne.n	8004f4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	32ae      	adds	r2, #174	; 0xae
 8004f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	32ae      	adds	r2, #174	; 0xae
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	4611      	mov	r1, r2
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	32ae      	adds	r2, #174	; 0xae
 8004f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e01c      	b.n	8004fb2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d115      	bne.n	8004fb0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	32ae      	adds	r2, #174	; 0xae
 8004f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	32ae      	adds	r2, #174	; 0xae
 8004fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	4611      	mov	r1, r2
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6852      	ldr	r2, [r2, #4]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005008:	2303      	movs	r3, #3
 800500a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005022:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800503c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	885b      	ldrh	r3, [r3, #2]
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	429a      	cmp	r2, r3
 8005070:	d920      	bls.n	80050b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800507a:	e013      	b.n	80050a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800507c:	f107 030a 	add.w	r3, r7, #10
 8005080:	4619      	mov	r1, r3
 8005082:	6978      	ldr	r0, [r7, #20]
 8005084:	f000 f81b 	bl	80050be <USBD_GetNextDesc>
 8005088:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	2b05      	cmp	r3, #5
 8005090:	d108      	bne.n	80050a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	789b      	ldrb	r3, [r3, #2]
 800509a:	78fa      	ldrb	r2, [r7, #3]
 800509c:	429a      	cmp	r2, r3
 800509e:	d008      	beq.n	80050b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	885b      	ldrh	r3, [r3, #2]
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	897b      	ldrh	r3, [r7, #10]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d8e5      	bhi.n	800507c <USBD_GetEpDesc+0x32>
 80050b0:	e000      	b.n	80050b4 <USBD_GetEpDesc+0x6a>
          break;
 80050b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80050b4:	693b      	ldr	r3, [r7, #16]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	4413      	add	r3, r2
 80050d8:	b29a      	uxth	r2, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4413      	add	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80050ea:	68fb      	ldr	r3, [r7, #12]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	3301      	adds	r3, #1
 800510e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005116:	8a3b      	ldrh	r3, [r7, #16]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	b21a      	sxth	r2, r3
 800511c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005120:	4313      	orrs	r3, r2
 8005122:	b21b      	sxth	r3, r3
 8005124:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005126:	89fb      	ldrh	r3, [r7, #14]
}
 8005128:	4618      	mov	r0, r3
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800514a:	2b40      	cmp	r3, #64	; 0x40
 800514c:	d005      	beq.n	800515a <USBD_StdDevReq+0x26>
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d857      	bhi.n	8005202 <USBD_StdDevReq+0xce>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00f      	beq.n	8005176 <USBD_StdDevReq+0x42>
 8005156:	2b20      	cmp	r3, #32
 8005158:	d153      	bne.n	8005202 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	32ae      	adds	r2, #174	; 0xae
 8005164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	6839      	ldr	r1, [r7, #0]
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	4798      	blx	r3
 8005170:	4603      	mov	r3, r0
 8005172:	73fb      	strb	r3, [r7, #15]
      break;
 8005174:	e04a      	b.n	800520c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	2b09      	cmp	r3, #9
 800517c:	d83b      	bhi.n	80051f6 <USBD_StdDevReq+0xc2>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <USBD_StdDevReq+0x50>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051d9 	.word	0x080051d9
 8005188:	080051ed 	.word	0x080051ed
 800518c:	080051f7 	.word	0x080051f7
 8005190:	080051e3 	.word	0x080051e3
 8005194:	080051f7 	.word	0x080051f7
 8005198:	080051b7 	.word	0x080051b7
 800519c:	080051ad 	.word	0x080051ad
 80051a0:	080051f7 	.word	0x080051f7
 80051a4:	080051cf 	.word	0x080051cf
 80051a8:	080051c1 	.word	0x080051c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa3c 	bl	800562c <USBD_GetDescriptor>
          break;
 80051b4:	e024      	b.n	8005200 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fba1 	bl	8005900 <USBD_SetAddress>
          break;
 80051be:	e01f      	b.n	8005200 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fbe0 	bl	8005988 <USBD_SetConfig>
 80051c8:	4603      	mov	r3, r0
 80051ca:	73fb      	strb	r3, [r7, #15]
          break;
 80051cc:	e018      	b.n	8005200 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fc83 	bl	8005adc <USBD_GetConfig>
          break;
 80051d6:	e013      	b.n	8005200 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fcb4 	bl	8005b48 <USBD_GetStatus>
          break;
 80051e0:	e00e      	b.n	8005200 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fce3 	bl	8005bb0 <USBD_SetFeature>
          break;
 80051ea:	e009      	b.n	8005200 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fd07 	bl	8005c02 <USBD_ClrFeature>
          break;
 80051f4:	e004      	b.n	8005200 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80051f6:	6839      	ldr	r1, [r7, #0]
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fd5e 	bl	8005cba <USBD_CtlError>
          break;
 80051fe:	bf00      	nop
      }
      break;
 8005200:	e004      	b.n	800520c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005202:	6839      	ldr	r1, [r7, #0]
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fd58 	bl	8005cba <USBD_CtlError>
      break;
 800520a:	bf00      	nop
  }

  return ret;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop

08005218 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	d005      	beq.n	800523e <USBD_StdItfReq+0x26>
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d852      	bhi.n	80052dc <USBD_StdItfReq+0xc4>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <USBD_StdItfReq+0x26>
 800523a:	2b20      	cmp	r3, #32
 800523c:	d14e      	bne.n	80052dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005244:	b2db      	uxtb	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	2b02      	cmp	r3, #2
 800524a:	d840      	bhi.n	80052ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	889b      	ldrh	r3, [r3, #4]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b01      	cmp	r3, #1
 8005254:	d836      	bhi.n	80052c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	889b      	ldrh	r3, [r3, #4]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff fed9 	bl	8005016 <USBD_CoreFindIF>
 8005264:	4603      	mov	r3, r0
 8005266:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	2bff      	cmp	r3, #255	; 0xff
 800526c:	d01d      	beq.n	80052aa <USBD_StdItfReq+0x92>
 800526e:	7bbb      	ldrb	r3, [r7, #14]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d11a      	bne.n	80052aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005274:	7bba      	ldrb	r2, [r7, #14]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	32ae      	adds	r2, #174	; 0xae
 800527a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00f      	beq.n	80052a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005284:	7bba      	ldrb	r2, [r7, #14]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800528c:	7bba      	ldrb	r2, [r7, #14]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	32ae      	adds	r2, #174	; 0xae
 8005292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
 800529e:	4603      	mov	r3, r0
 80052a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80052a2:	e004      	b.n	80052ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80052a4:	2303      	movs	r3, #3
 80052a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80052a8:	e001      	b.n	80052ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80052aa:	2303      	movs	r3, #3
 80052ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	88db      	ldrh	r3, [r3, #6]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d110      	bne.n	80052d8 <USBD_StdItfReq+0xc0>
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10d      	bne.n	80052d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fdaa 	bl	8005e16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80052c2:	e009      	b.n	80052d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fcf7 	bl	8005cba <USBD_CtlError>
          break;
 80052cc:	e004      	b.n	80052d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fcf2 	bl	8005cba <USBD_CtlError>
          break;
 80052d6:	e000      	b.n	80052da <USBD_StdItfReq+0xc2>
          break;
 80052d8:	bf00      	nop
      }
      break;
 80052da:	e004      	b.n	80052e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fceb 	bl	8005cba <USBD_CtlError>
      break;
 80052e4:	bf00      	nop
  }

  return ret;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	889b      	ldrh	r3, [r3, #4]
 8005302:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800530c:	2b40      	cmp	r3, #64	; 0x40
 800530e:	d007      	beq.n	8005320 <USBD_StdEPReq+0x30>
 8005310:	2b40      	cmp	r3, #64	; 0x40
 8005312:	f200 817f 	bhi.w	8005614 <USBD_StdEPReq+0x324>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d02a      	beq.n	8005370 <USBD_StdEPReq+0x80>
 800531a:	2b20      	cmp	r3, #32
 800531c:	f040 817a 	bne.w	8005614 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005320:	7bbb      	ldrb	r3, [r7, #14]
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fe83 	bl	8005030 <USBD_CoreFindEP>
 800532a:	4603      	mov	r3, r0
 800532c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800532e:	7b7b      	ldrb	r3, [r7, #13]
 8005330:	2bff      	cmp	r3, #255	; 0xff
 8005332:	f000 8174 	beq.w	800561e <USBD_StdEPReq+0x32e>
 8005336:	7b7b      	ldrb	r3, [r7, #13]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f040 8170 	bne.w	800561e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800533e:	7b7a      	ldrb	r2, [r7, #13]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005346:	7b7a      	ldrb	r2, [r7, #13]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	32ae      	adds	r2, #174	; 0xae
 800534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8163 	beq.w	800561e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005358:	7b7a      	ldrb	r2, [r7, #13]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	32ae      	adds	r2, #174	; 0xae
 800535e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
 800536a:	4603      	mov	r3, r0
 800536c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800536e:	e156      	b.n	800561e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d008      	beq.n	800538a <USBD_StdEPReq+0x9a>
 8005378:	2b03      	cmp	r3, #3
 800537a:	f300 8145 	bgt.w	8005608 <USBD_StdEPReq+0x318>
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 809b 	beq.w	80054ba <USBD_StdEPReq+0x1ca>
 8005384:	2b01      	cmp	r3, #1
 8005386:	d03c      	beq.n	8005402 <USBD_StdEPReq+0x112>
 8005388:	e13e      	b.n	8005608 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d002      	beq.n	800539c <USBD_StdEPReq+0xac>
 8005396:	2b03      	cmp	r3, #3
 8005398:	d016      	beq.n	80053c8 <USBD_StdEPReq+0xd8>
 800539a:	e02c      	b.n	80053f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <USBD_StdEPReq+0xce>
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d00a      	beq.n	80053be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80053a8:	7bbb      	ldrb	r3, [r7, #14]
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 f877 	bl	80064a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f001 f873 	bl	80064a0 <USBD_LL_StallEP>
 80053ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80053bc:	e020      	b.n	8005400 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fc7a 	bl	8005cba <USBD_CtlError>
              break;
 80053c6:	e01b      	b.n	8005400 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	885b      	ldrh	r3, [r3, #2]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10e      	bne.n	80053ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053d0:	7bbb      	ldrb	r3, [r7, #14]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00b      	beq.n	80053ee <USBD_StdEPReq+0xfe>
 80053d6:	7bbb      	ldrb	r3, [r7, #14]
 80053d8:	2b80      	cmp	r3, #128	; 0x80
 80053da:	d008      	beq.n	80053ee <USBD_StdEPReq+0xfe>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	88db      	ldrh	r3, [r3, #6]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80053e4:	7bbb      	ldrb	r3, [r7, #14]
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 f859 	bl	80064a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fd11 	bl	8005e16 <USBD_CtlSendStatus>

              break;
 80053f4:	e004      	b.n	8005400 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fc5e 	bl	8005cba <USBD_CtlError>
              break;
 80053fe:	bf00      	nop
          }
          break;
 8005400:	e107      	b.n	8005612 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d002      	beq.n	8005414 <USBD_StdEPReq+0x124>
 800540e:	2b03      	cmp	r3, #3
 8005410:	d016      	beq.n	8005440 <USBD_StdEPReq+0x150>
 8005412:	e04b      	b.n	80054ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005414:	7bbb      	ldrb	r3, [r7, #14]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00d      	beq.n	8005436 <USBD_StdEPReq+0x146>
 800541a:	7bbb      	ldrb	r3, [r7, #14]
 800541c:	2b80      	cmp	r3, #128	; 0x80
 800541e:	d00a      	beq.n	8005436 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f001 f83b 	bl	80064a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800542a:	2180      	movs	r1, #128	; 0x80
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 f837 	bl	80064a0 <USBD_LL_StallEP>
 8005432:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005434:	e040      	b.n	80054b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005436:	6839      	ldr	r1, [r7, #0]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fc3e 	bl	8005cba <USBD_CtlError>
              break;
 800543e:	e03b      	b.n	80054b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	885b      	ldrh	r3, [r3, #2]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d136      	bne.n	80054b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005448:	7bbb      	ldrb	r3, [r7, #14]
 800544a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 f841 	bl	80064de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fcda 	bl	8005e16 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fde2 	bl	8005030 <USBD_CoreFindEP>
 800546c:	4603      	mov	r3, r0
 800546e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005470:	7b7b      	ldrb	r3, [r7, #13]
 8005472:	2bff      	cmp	r3, #255	; 0xff
 8005474:	d01f      	beq.n	80054b6 <USBD_StdEPReq+0x1c6>
 8005476:	7b7b      	ldrb	r3, [r7, #13]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11c      	bne.n	80054b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800547c:	7b7a      	ldrb	r2, [r7, #13]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005484:	7b7a      	ldrb	r2, [r7, #13]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	32ae      	adds	r2, #174	; 0xae
 800548a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d010      	beq.n	80054b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005494:	7b7a      	ldrb	r2, [r7, #13]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	32ae      	adds	r2, #174	; 0xae
 800549a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80054aa:	e004      	b.n	80054b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fc03 	bl	8005cba <USBD_CtlError>
              break;
 80054b4:	e000      	b.n	80054b8 <USBD_StdEPReq+0x1c8>
              break;
 80054b6:	bf00      	nop
          }
          break;
 80054b8:	e0ab      	b.n	8005612 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d002      	beq.n	80054cc <USBD_StdEPReq+0x1dc>
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d032      	beq.n	8005530 <USBD_StdEPReq+0x240>
 80054ca:	e097      	b.n	80055fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054cc:	7bbb      	ldrb	r3, [r7, #14]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <USBD_StdEPReq+0x1f2>
 80054d2:	7bbb      	ldrb	r3, [r7, #14]
 80054d4:	2b80      	cmp	r3, #128	; 0x80
 80054d6:	d004      	beq.n	80054e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fbed 	bl	8005cba <USBD_CtlError>
                break;
 80054e0:	e091      	b.n	8005606 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	da0b      	bge.n	8005502 <USBD_StdEPReq+0x212>
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	3310      	adds	r3, #16
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	3304      	adds	r3, #4
 8005500:	e00b      	b.n	800551a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005502:	7bbb      	ldrb	r3, [r7, #14]
 8005504:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	4413      	add	r3, r2
 8005518:	3304      	adds	r3, #4
 800551a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2202      	movs	r2, #2
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fc37 	bl	8005d9c <USBD_CtlSendData>
              break;
 800552e:	e06a      	b.n	8005606 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005534:	2b00      	cmp	r3, #0
 8005536:	da11      	bge.n	800555c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005538:	7bbb      	ldrb	r3, [r7, #14]
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	3324      	adds	r3, #36	; 0x24
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d117      	bne.n	8005582 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005552:	6839      	ldr	r1, [r7, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fbb0 	bl	8005cba <USBD_CtlError>
                  break;
 800555a:	e054      	b.n	8005606 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800555c:	7bbb      	ldrb	r3, [r7, #14]
 800555e:	f003 020f 	and.w	r2, r3, #15
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fb9d 	bl	8005cba <USBD_CtlError>
                  break;
 8005580:	e041      	b.n	8005606 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005586:	2b00      	cmp	r3, #0
 8005588:	da0b      	bge.n	80055a2 <USBD_StdEPReq+0x2b2>
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	3310      	adds	r3, #16
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4413      	add	r3, r2
 800559e:	3304      	adds	r3, #4
 80055a0:	e00b      	b.n	80055ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	4413      	add	r3, r2
 80055b8:	3304      	adds	r3, #4
 80055ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80055bc:	7bbb      	ldrb	r3, [r7, #14]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <USBD_StdEPReq+0x2d8>
 80055c2:	7bbb      	ldrb	r3, [r7, #14]
 80055c4:	2b80      	cmp	r3, #128	; 0x80
 80055c6:	d103      	bne.n	80055d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e00e      	b.n	80055ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 ffa1 	bl	800651c <USBD_LL_IsStallEP>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e002      	b.n	80055ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2202      	movs	r2, #2
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fbd1 	bl	8005d9c <USBD_CtlSendData>
              break;
 80055fa:	e004      	b.n	8005606 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb5b 	bl	8005cba <USBD_CtlError>
              break;
 8005604:	bf00      	nop
          }
          break;
 8005606:	e004      	b.n	8005612 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fb55 	bl	8005cba <USBD_CtlError>
          break;
 8005610:	bf00      	nop
      }
      break;
 8005612:	e005      	b.n	8005620 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fb4f 	bl	8005cba <USBD_CtlError>
      break;
 800561c:	e000      	b.n	8005620 <USBD_StdEPReq+0x330>
      break;
 800561e:	bf00      	nop
  }

  return ret;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	885b      	ldrh	r3, [r3, #2]
 8005646:	0a1b      	lsrs	r3, r3, #8
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	2b06      	cmp	r3, #6
 800564e:	f200 8128 	bhi.w	80058a2 <USBD_GetDescriptor+0x276>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <USBD_GetDescriptor+0x2c>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	08005675 	.word	0x08005675
 800565c:	0800568d 	.word	0x0800568d
 8005660:	080056cd 	.word	0x080056cd
 8005664:	080058a3 	.word	0x080058a3
 8005668:	080058a3 	.word	0x080058a3
 800566c:	08005843 	.word	0x08005843
 8005670:	0800586f 	.word	0x0800586f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	7c12      	ldrb	r2, [r2, #16]
 8005680:	f107 0108 	add.w	r1, r7, #8
 8005684:	4610      	mov	r0, r2
 8005686:	4798      	blx	r3
 8005688:	60f8      	str	r0, [r7, #12]
      break;
 800568a:	e112      	b.n	80058b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	7c1b      	ldrb	r3, [r3, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10d      	bne.n	80056b0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	f107 0208 	add.w	r2, r7, #8
 80056a0:	4610      	mov	r0, r2
 80056a2:	4798      	blx	r3
 80056a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3301      	adds	r3, #1
 80056aa:	2202      	movs	r2, #2
 80056ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80056ae:	e100      	b.n	80058b2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	f107 0208 	add.w	r2, r7, #8
 80056bc:	4610      	mov	r0, r2
 80056be:	4798      	blx	r3
 80056c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3301      	adds	r3, #1
 80056c6:	2202      	movs	r2, #2
 80056c8:	701a      	strb	r2, [r3, #0]
      break;
 80056ca:	e0f2      	b.n	80058b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	885b      	ldrh	r3, [r3, #2]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	f200 80ac 	bhi.w	8005830 <USBD_GetDescriptor+0x204>
 80056d8:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <USBD_GetDescriptor+0xb4>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	080056f9 	.word	0x080056f9
 80056e4:	0800572d 	.word	0x0800572d
 80056e8:	08005761 	.word	0x08005761
 80056ec:	08005795 	.word	0x08005795
 80056f0:	080057c9 	.word	0x080057c9
 80056f4:	080057fd 	.word	0x080057fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	7c12      	ldrb	r2, [r2, #16]
 8005710:	f107 0108 	add.w	r1, r7, #8
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
 8005718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800571a:	e091      	b.n	8005840 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 facb 	bl	8005cba <USBD_CtlError>
            err++;
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	3301      	adds	r3, #1
 8005728:	72fb      	strb	r3, [r7, #11]
          break;
 800572a:	e089      	b.n	8005840 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00b      	beq.n	8005750 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	7c12      	ldrb	r2, [r2, #16]
 8005744:	f107 0108 	add.w	r1, r7, #8
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
 800574c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800574e:	e077      	b.n	8005840 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fab1 	bl	8005cba <USBD_CtlError>
            err++;
 8005758:	7afb      	ldrb	r3, [r7, #11]
 800575a:	3301      	adds	r3, #1
 800575c:	72fb      	strb	r3, [r7, #11]
          break;
 800575e:	e06f      	b.n	8005840 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	7c12      	ldrb	r2, [r2, #16]
 8005778:	f107 0108 	add.w	r1, r7, #8
 800577c:	4610      	mov	r0, r2
 800577e:	4798      	blx	r3
 8005780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005782:	e05d      	b.n	8005840 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa97 	bl	8005cba <USBD_CtlError>
            err++;
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	3301      	adds	r3, #1
 8005790:	72fb      	strb	r3, [r7, #11]
          break;
 8005792:	e055      	b.n	8005840 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	7c12      	ldrb	r2, [r2, #16]
 80057ac:	f107 0108 	add.w	r1, r7, #8
 80057b0:	4610      	mov	r0, r2
 80057b2:	4798      	blx	r3
 80057b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057b6:	e043      	b.n	8005840 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa7d 	bl	8005cba <USBD_CtlError>
            err++;
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	3301      	adds	r3, #1
 80057c4:	72fb      	strb	r3, [r7, #11]
          break;
 80057c6:	e03b      	b.n	8005840 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	7c12      	ldrb	r2, [r2, #16]
 80057e0:	f107 0108 	add.w	r1, r7, #8
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
 80057e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057ea:	e029      	b.n	8005840 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa63 	bl	8005cba <USBD_CtlError>
            err++;
 80057f4:	7afb      	ldrb	r3, [r7, #11]
 80057f6:	3301      	adds	r3, #1
 80057f8:	72fb      	strb	r3, [r7, #11]
          break;
 80057fa:	e021      	b.n	8005840 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00b      	beq.n	8005820 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	7c12      	ldrb	r2, [r2, #16]
 8005814:	f107 0108 	add.w	r1, r7, #8
 8005818:	4610      	mov	r0, r2
 800581a:	4798      	blx	r3
 800581c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800581e:	e00f      	b.n	8005840 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa49 	bl	8005cba <USBD_CtlError>
            err++;
 8005828:	7afb      	ldrb	r3, [r7, #11]
 800582a:	3301      	adds	r3, #1
 800582c:	72fb      	strb	r3, [r7, #11]
          break;
 800582e:	e007      	b.n	8005840 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa41 	bl	8005cba <USBD_CtlError>
          err++;
 8005838:	7afb      	ldrb	r3, [r7, #11]
 800583a:	3301      	adds	r3, #1
 800583c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800583e:	bf00      	nop
      }
      break;
 8005840:	e037      	b.n	80058b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7c1b      	ldrb	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005852:	f107 0208 	add.w	r2, r7, #8
 8005856:	4610      	mov	r0, r2
 8005858:	4798      	blx	r3
 800585a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800585c:	e029      	b.n	80058b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fa2a 	bl	8005cba <USBD_CtlError>
        err++;
 8005866:	7afb      	ldrb	r3, [r7, #11]
 8005868:	3301      	adds	r3, #1
 800586a:	72fb      	strb	r3, [r7, #11]
      break;
 800586c:	e021      	b.n	80058b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	7c1b      	ldrb	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10d      	bne.n	8005892 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	f107 0208 	add.w	r2, r7, #8
 8005882:	4610      	mov	r0, r2
 8005884:	4798      	blx	r3
 8005886:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	3301      	adds	r3, #1
 800588c:	2207      	movs	r2, #7
 800588e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005890:	e00f      	b.n	80058b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa10 	bl	8005cba <USBD_CtlError>
        err++;
 800589a:	7afb      	ldrb	r3, [r7, #11]
 800589c:	3301      	adds	r3, #1
 800589e:	72fb      	strb	r3, [r7, #11]
      break;
 80058a0:	e007      	b.n	80058b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fa08 	bl	8005cba <USBD_CtlError>
      err++;
 80058aa:	7afb      	ldrb	r3, [r7, #11]
 80058ac:	3301      	adds	r3, #1
 80058ae:	72fb      	strb	r3, [r7, #11]
      break;
 80058b0:	bf00      	nop
  }

  if (err != 0U)
 80058b2:	7afb      	ldrb	r3, [r7, #11]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d11e      	bne.n	80058f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	88db      	ldrh	r3, [r3, #6]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d016      	beq.n	80058ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80058c0:	893b      	ldrh	r3, [r7, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00e      	beq.n	80058e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	88da      	ldrh	r2, [r3, #6]
 80058ca:	893b      	ldrh	r3, [r7, #8]
 80058cc:	4293      	cmp	r3, r2
 80058ce:	bf28      	it	cs
 80058d0:	4613      	movcs	r3, r2
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058d6:	893b      	ldrh	r3, [r7, #8]
 80058d8:	461a      	mov	r2, r3
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fa5d 	bl	8005d9c <USBD_CtlSendData>
 80058e2:	e009      	b.n	80058f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9e7 	bl	8005cba <USBD_CtlError>
 80058ec:	e004      	b.n	80058f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fa91 	bl	8005e16 <USBD_CtlSendStatus>
 80058f4:	e000      	b.n	80058f8 <USBD_GetDescriptor+0x2cc>
    return;
 80058f6:	bf00      	nop
  }
}
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop

08005900 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	889b      	ldrh	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d131      	bne.n	8005976 <USBD_SetAddress+0x76>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	88db      	ldrh	r3, [r3, #6]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d12d      	bne.n	8005976 <USBD_SetAddress+0x76>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	885b      	ldrh	r3, [r3, #2]
 800591e:	2b7f      	cmp	r3, #127	; 0x7f
 8005920:	d829      	bhi.n	8005976 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	885b      	ldrh	r3, [r3, #2]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b03      	cmp	r3, #3
 8005938:	d104      	bne.n	8005944 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f9bc 	bl	8005cba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005942:	e01d      	b.n	8005980 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	7bfa      	ldrb	r2, [r7, #15]
 8005948:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fe0f 	bl	8006574 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fa5d 	bl	8005e16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d004      	beq.n	800596c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596a:	e009      	b.n	8005980 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005974:	e004      	b.n	8005980 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f99e 	bl	8005cba <USBD_CtlError>
  }
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	885b      	ldrh	r3, [r3, #2]
 800599a:	b2da      	uxtb	r2, r3
 800599c:	4b4e      	ldr	r3, [pc, #312]	; (8005ad8 <USBD_SetConfig+0x150>)
 800599e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059a0:	4b4d      	ldr	r3, [pc, #308]	; (8005ad8 <USBD_SetConfig+0x150>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d905      	bls.n	80059b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f985 	bl	8005cba <USBD_CtlError>
    return USBD_FAIL;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e08c      	b.n	8005ace <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d002      	beq.n	80059c6 <USBD_SetConfig+0x3e>
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d029      	beq.n	8005a18 <USBD_SetConfig+0x90>
 80059c4:	e075      	b.n	8005ab2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80059c6:	4b44      	ldr	r3, [pc, #272]	; (8005ad8 <USBD_SetConfig+0x150>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d020      	beq.n	8005a10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80059ce:	4b42      	ldr	r3, [pc, #264]	; (8005ad8 <USBD_SetConfig+0x150>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80059d8:	4b3f      	ldr	r3, [pc, #252]	; (8005ad8 <USBD_SetConfig+0x150>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fe ffe7 	bl	80049b2 <USBD_SetClassConfig>
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f962 	bl	8005cba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80059fe:	e065      	b.n	8005acc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fa08 	bl	8005e16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2203      	movs	r2, #3
 8005a0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005a0e:	e05d      	b.n	8005acc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fa00 	bl	8005e16 <USBD_CtlSendStatus>
      break;
 8005a16:	e059      	b.n	8005acc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005a18:	4b2f      	ldr	r3, [pc, #188]	; (8005ad8 <USBD_SetConfig+0x150>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d112      	bne.n	8005a46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005a28:	4b2b      	ldr	r3, [pc, #172]	; (8005ad8 <USBD_SetConfig+0x150>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a32:	4b29      	ldr	r3, [pc, #164]	; (8005ad8 <USBD_SetConfig+0x150>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fe ffd6 	bl	80049ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f9e9 	bl	8005e16 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a44:	e042      	b.n	8005acc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <USBD_SetConfig+0x150>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d02a      	beq.n	8005aaa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fe ffc4 	bl	80049ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005a62:	4b1d      	ldr	r3, [pc, #116]	; (8005ad8 <USBD_SetConfig+0x150>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <USBD_SetConfig+0x150>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fe ff9d 	bl	80049b2 <USBD_SetClassConfig>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00f      	beq.n	8005aa2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f918 	bl	8005cba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fe ffa9 	bl	80049ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005aa0:	e014      	b.n	8005acc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f9b7 	bl	8005e16 <USBD_CtlSendStatus>
      break;
 8005aa8:	e010      	b.n	8005acc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9b3 	bl	8005e16 <USBD_CtlSendStatus>
      break;
 8005ab0:	e00c      	b.n	8005acc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f900 	bl	8005cba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <USBD_SetConfig+0x150>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fe ff92 	bl	80049ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8005aca:	bf00      	nop
  }

  return ret;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000138 	.word	0x20000138

08005adc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	88db      	ldrh	r3, [r3, #6]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d004      	beq.n	8005af8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f8e2 	bl	8005cba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005af6:	e023      	b.n	8005b40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	dc02      	bgt.n	8005b0a <USBD_GetConfig+0x2e>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dc03      	bgt.n	8005b10 <USBD_GetConfig+0x34>
 8005b08:	e015      	b.n	8005b36 <USBD_GetConfig+0x5a>
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d00b      	beq.n	8005b26 <USBD_GetConfig+0x4a>
 8005b0e:	e012      	b.n	8005b36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f93c 	bl	8005d9c <USBD_CtlSendData>
        break;
 8005b24:	e00c      	b.n	8005b40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f934 	bl	8005d9c <USBD_CtlSendData>
        break;
 8005b34:	e004      	b.n	8005b40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f8be 	bl	8005cba <USBD_CtlError>
        break;
 8005b3e:	bf00      	nop
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d81e      	bhi.n	8005b9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	88db      	ldrh	r3, [r3, #6]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d004      	beq.n	8005b72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f8a5 	bl	8005cba <USBD_CtlError>
        break;
 8005b70:	e01a      	b.n	8005ba8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f043 0202 	orr.w	r2, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	330c      	adds	r3, #12
 8005b92:	2202      	movs	r2, #2
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f900 	bl	8005d9c <USBD_CtlSendData>
      break;
 8005b9c:	e004      	b.n	8005ba8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f88a 	bl	8005cba <USBD_CtlError>
      break;
 8005ba6:	bf00      	nop
  }
}
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	885b      	ldrh	r3, [r3, #2]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d107      	bne.n	8005bd2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f923 	bl	8005e16 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005bd0:	e013      	b.n	8005bfa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	885b      	ldrh	r3, [r3, #2]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d10b      	bne.n	8005bf2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	889b      	ldrh	r3, [r3, #4]
 8005bde:	0a1b      	lsrs	r3, r3, #8
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f913 	bl	8005e16 <USBD_CtlSendStatus>
}
 8005bf0:	e003      	b.n	8005bfa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f860 	bl	8005cba <USBD_CtlError>
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d80b      	bhi.n	8005c32 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	885b      	ldrh	r3, [r3, #2]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d10c      	bne.n	8005c3c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f8f3 	bl	8005e16 <USBD_CtlSendStatus>
      }
      break;
 8005c30:	e004      	b.n	8005c3c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f840 	bl	8005cba <USBD_CtlError>
      break;
 8005c3a:	e000      	b.n	8005c3e <USBD_ClrFeature+0x3c>
      break;
 8005c3c:	bf00      	nop
  }
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	781a      	ldrb	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7ff fa41 	bl	80050f8 <SWAPBYTE>
 8005c76:	4603      	mov	r3, r0
 8005c78:	461a      	mov	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff fa34 	bl	80050f8 <SWAPBYTE>
 8005c90:	4603      	mov	r3, r0
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff fa27 	bl	80050f8 <SWAPBYTE>
 8005caa:	4603      	mov	r3, r0
 8005cac:	461a      	mov	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	80da      	strh	r2, [r3, #6]
}
 8005cb2:	bf00      	nop
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b082      	sub	sp, #8
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cc4:	2180      	movs	r1, #128	; 0x80
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fbea 	bl	80064a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005ccc:	2100      	movs	r1, #0
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fbe6 	bl	80064a0 <USBD_LL_StallEP>
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d036      	beq.n	8005d60 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005cf6:	6938      	ldr	r0, [r7, #16]
 8005cf8:	f000 f836 	bl	8005d68 <USBD_GetLen>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	3301      	adds	r3, #1
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	4413      	add	r3, r2
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	7812      	ldrb	r2, [r2, #0]
 8005d14:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	4413      	add	r3, r2
 8005d22:	2203      	movs	r2, #3
 8005d24:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d2c:	e013      	b.n	8005d56 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	4413      	add	r3, r2
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	7812      	ldrb	r2, [r2, #0]
 8005d38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	613b      	str	r3, [r7, #16]
    idx++;
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	3301      	adds	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d50:	7dfb      	ldrb	r3, [r7, #23]
 8005d52:	3301      	adds	r3, #1
 8005d54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e7      	bne.n	8005d2e <USBD_GetString+0x52>
 8005d5e:	e000      	b.n	8005d62 <USBD_GetString+0x86>
    return;
 8005d60:	bf00      	nop
  }
}
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d78:	e005      	b.n	8005d86 <USBD_GetLen+0x1e>
  {
    len++;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f5      	bne.n	8005d7a <USBD_GetLen+0x12>
  }

  return len;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fbf5 	bl	80065b2 <USBD_LL_Transmit>

  return USBD_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	2100      	movs	r1, #0
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fbe4 	bl	80065b2 <USBD_LL_Transmit>

  return USBD_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	2100      	movs	r1, #0
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fbf4 	bl	80065f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b082      	sub	sp, #8
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2204      	movs	r2, #4
 8005e22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e26:	2300      	movs	r3, #0
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fbc0 	bl	80065b2 <USBD_LL_Transmit>

  return USBD_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2205      	movs	r2, #5
 8005e48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2100      	movs	r1, #0
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fbce 	bl	80065f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	490e      	ldr	r1, [pc, #56]	; (8005ea4 <MX_USB_DEVICE_Init+0x40>)
 8005e6c:	480e      	ldr	r0, [pc, #56]	; (8005ea8 <MX_USB_DEVICE_Init+0x44>)
 8005e6e:	f7fe fd23 	bl	80048b8 <USBD_Init>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e78:	f7fa fc16 	bl	80006a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005e7c:	490b      	ldr	r1, [pc, #44]	; (8005eac <MX_USB_DEVICE_Init+0x48>)
 8005e7e:	480a      	ldr	r0, [pc, #40]	; (8005ea8 <MX_USB_DEVICE_Init+0x44>)
 8005e80:	f7fe fd4a 	bl	8004918 <USBD_RegisterClass>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005e8a:	f7fa fc0d 	bl	80006a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e8e:	4806      	ldr	r0, [pc, #24]	; (8005ea8 <MX_USB_DEVICE_Init+0x44>)
 8005e90:	f7fe fd78 	bl	8004984 <USBD_Start>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005e9a:	f7fa fc05 	bl	80006a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e9e:	bf00      	nop
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200000c0 	.word	0x200000c0
 8005ea8:	2000013c 	.word	0x2000013c
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	6039      	str	r1, [r7, #0]
 8005eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2212      	movs	r2, #18
 8005ec0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005ec2:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	200000dc 	.word	0x200000dc

08005ed4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	6039      	str	r1, [r7, #0]
 8005ede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005ee6:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	200000f0 	.word	0x200000f0

08005ef8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	6039      	str	r1, [r7, #0]
 8005f02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d105      	bne.n	8005f16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	4907      	ldr	r1, [pc, #28]	; (8005f2c <USBD_FS_ProductStrDescriptor+0x34>)
 8005f0e:	4808      	ldr	r0, [pc, #32]	; (8005f30 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f10:	f7ff fee4 	bl	8005cdc <USBD_GetString>
 8005f14:	e004      	b.n	8005f20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	4904      	ldr	r1, [pc, #16]	; (8005f2c <USBD_FS_ProductStrDescriptor+0x34>)
 8005f1a:	4805      	ldr	r0, [pc, #20]	; (8005f30 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f1c:	f7ff fede 	bl	8005cdc <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f20:	4b02      	ldr	r3, [pc, #8]	; (8005f2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000418 	.word	0x20000418
 8005f30:	08006730 	.word	0x08006730

08005f34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	4904      	ldr	r1, [pc, #16]	; (8005f54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005f44:	4804      	ldr	r0, [pc, #16]	; (8005f58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005f46:	f7ff fec9 	bl	8005cdc <USBD_GetString>
  return USBD_StrDesc;
 8005f4a:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000418 	.word	0x20000418
 8005f58:	08006748 	.word	0x08006748

08005f5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	6039      	str	r1, [r7, #0]
 8005f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	221a      	movs	r2, #26
 8005f6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f6e:	f000 f843 	bl	8005ff8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f72:	4b02      	ldr	r3, [pc, #8]	; (8005f7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	200000f4 	.word	0x200000f4

08005f80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	4907      	ldr	r1, [pc, #28]	; (8005fb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f96:	4808      	ldr	r0, [pc, #32]	; (8005fb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f98:	f7ff fea0 	bl	8005cdc <USBD_GetString>
 8005f9c:	e004      	b.n	8005fa8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	4904      	ldr	r1, [pc, #16]	; (8005fb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005fa2:	4805      	ldr	r0, [pc, #20]	; (8005fb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005fa4:	f7ff fe9a 	bl	8005cdc <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fa8:	4b02      	ldr	r3, [pc, #8]	; (8005fb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000418 	.word	0x20000418
 8005fb8:	0800675c 	.word	0x0800675c

08005fbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	6039      	str	r1, [r7, #0]
 8005fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d105      	bne.n	8005fda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	4907      	ldr	r1, [pc, #28]	; (8005ff0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fd2:	4808      	ldr	r0, [pc, #32]	; (8005ff4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fd4:	f7ff fe82 	bl	8005cdc <USBD_GetString>
 8005fd8:	e004      	b.n	8005fe4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fde:	4805      	ldr	r0, [pc, #20]	; (8005ff4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fe0:	f7ff fe7c 	bl	8005cdc <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fe4:	4b02      	ldr	r3, [pc, #8]	; (8005ff0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000418 	.word	0x20000418
 8005ff4:	08006768 	.word	0x08006768

08005ff8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <Get_SerialNum+0x44>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <Get_SerialNum+0x48>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <Get_SerialNum+0x4c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d009      	beq.n	8006032 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800601e:	2208      	movs	r2, #8
 8006020:	4909      	ldr	r1, [pc, #36]	; (8006048 <Get_SerialNum+0x50>)
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f814 	bl	8006050 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006028:	2204      	movs	r2, #4
 800602a:	4908      	ldr	r1, [pc, #32]	; (800604c <Get_SerialNum+0x54>)
 800602c:	68b8      	ldr	r0, [r7, #8]
 800602e:	f000 f80f 	bl	8006050 <IntToUnicode>
  }
}
 8006032:	bf00      	nop
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	1fff7a10 	.word	0x1fff7a10
 8006040:	1fff7a14 	.word	0x1fff7a14
 8006044:	1fff7a18 	.word	0x1fff7a18
 8006048:	200000f6 	.word	0x200000f6
 800604c:	20000106 	.word	0x20000106

08006050 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006062:	2300      	movs	r3, #0
 8006064:	75fb      	strb	r3, [r7, #23]
 8006066:	e027      	b.n	80060b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	0f1b      	lsrs	r3, r3, #28
 800606c:	2b09      	cmp	r3, #9
 800606e:	d80b      	bhi.n	8006088 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	0f1b      	lsrs	r3, r3, #28
 8006074:	b2da      	uxtb	r2, r3
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	4619      	mov	r1, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	440b      	add	r3, r1
 8006080:	3230      	adds	r2, #48	; 0x30
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e00a      	b.n	800609e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	0f1b      	lsrs	r3, r3, #28
 800608c:	b2da      	uxtb	r2, r3
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	4619      	mov	r1, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	440b      	add	r3, r1
 8006098:	3237      	adds	r2, #55	; 0x37
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	3301      	adds	r3, #1
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	3301      	adds	r3, #1
 80060b6:	75fb      	strb	r3, [r7, #23]
 80060b8:	7dfa      	ldrb	r2, [r7, #23]
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d3d3      	bcc.n	8006068 <IntToUnicode+0x18>
  }
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d8:	f107 0314 	add.w	r3, r7, #20
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	609a      	str	r2, [r3, #8]
 80060e4:	60da      	str	r2, [r3, #12]
 80060e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060f0:	d13a      	bne.n	8006168 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060f2:	2300      	movs	r3, #0
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	4b1e      	ldr	r3, [pc, #120]	; (8006170 <HAL_PCD_MspInit+0xa0>)
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	4a1d      	ldr	r2, [pc, #116]	; (8006170 <HAL_PCD_MspInit+0xa0>)
 80060fc:	f043 0301 	orr.w	r3, r3, #1
 8006100:	6313      	str	r3, [r2, #48]	; 0x30
 8006102:	4b1b      	ldr	r3, [pc, #108]	; (8006170 <HAL_PCD_MspInit+0xa0>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800610e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006114:	2302      	movs	r3, #2
 8006116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006118:	2300      	movs	r3, #0
 800611a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800611c:	2303      	movs	r3, #3
 800611e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006120:	230a      	movs	r3, #10
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006124:	f107 0314 	add.w	r3, r7, #20
 8006128:	4619      	mov	r1, r3
 800612a:	4812      	ldr	r0, [pc, #72]	; (8006174 <HAL_PCD_MspInit+0xa4>)
 800612c:	f7fa fd02 	bl	8000b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006130:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <HAL_PCD_MspInit+0xa0>)
 8006132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006134:	4a0e      	ldr	r2, [pc, #56]	; (8006170 <HAL_PCD_MspInit+0xa0>)
 8006136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613a:	6353      	str	r3, [r2, #52]	; 0x34
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <HAL_PCD_MspInit+0xa0>)
 8006142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006144:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <HAL_PCD_MspInit+0xa0>)
 8006146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800614a:	6453      	str	r3, [r2, #68]	; 0x44
 800614c:	4b08      	ldr	r3, [pc, #32]	; (8006170 <HAL_PCD_MspInit+0xa0>)
 800614e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006158:	2200      	movs	r2, #0
 800615a:	2100      	movs	r1, #0
 800615c:	2043      	movs	r0, #67	; 0x43
 800615e:	f7fa fcb2 	bl	8000ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006162:	2043      	movs	r0, #67	; 0x43
 8006164:	f7fa fccb 	bl	8000afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006168:	bf00      	nop
 800616a:	3728      	adds	r7, #40	; 0x28
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40023800 	.word	0x40023800
 8006174:	40020000 	.word	0x40020000

08006178 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7fe fc45 	bl	8004a1e <USBD_LL_SetupStage>
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	4619      	mov	r1, r3
 80061c6:	f7fe fc7f 	bl	8004ac8 <USBD_LL_DataOutStage>
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	334c      	adds	r3, #76	; 0x4c
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	4619      	mov	r1, r3
 80061fa:	f7fe fd18 	bl	8004c2e <USBD_LL_DataInStage>
}
 80061fe:	bf00      	nop
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe fe4c 	bl	8004eb2 <USBD_LL_SOF>
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800622a:	2301      	movs	r3, #1
 800622c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d001      	beq.n	800623a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006236:	f7fa fa37 	bl	80006a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006240:	7bfa      	ldrb	r2, [r7, #15]
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fdf6 	bl	8004e36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe fd9e 	bl	8004d92 <USBD_LL_Reset>
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fdf1 	bl	8004e56 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006286:	f043 0301 	orr.w	r3, r3, #1
 800628a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006294:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <HAL_PCD_SuspendCallback+0x48>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	4a03      	ldr	r2, [pc, #12]	; (80062a8 <HAL_PCD_SuspendCallback+0x48>)
 800629a:	f043 0306 	orr.w	r3, r3, #6
 800629e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80062a0:	bf00      	nop
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	e000ed00 	.word	0xe000ed00

080062ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fde1 	bl	8004e82 <USBD_LL_Resume>
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80062da:	78fa      	ldrb	r2, [r7, #3]
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fe39 	bl	8004f56 <USBD_LL_IsoOUTIncomplete>
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80062fe:	78fa      	ldrb	r2, [r7, #3]
 8006300:	4611      	mov	r1, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fdf5 	bl	8004ef2 <USBD_LL_IsoINIncomplete>
}
 8006308:	bf00      	nop
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe fe4b 	bl	8004fba <USBD_LL_DevConnected>
}
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe fe48 	bl	8004fd0 <USBD_LL_DevDisconnected>
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d13c      	bne.n	80063d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006358:	4a20      	ldr	r2, [pc, #128]	; (80063dc <USBD_LL_Init+0x94>)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a1e      	ldr	r2, [pc, #120]	; (80063dc <USBD_LL_Init+0x94>)
 8006364:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006368:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <USBD_LL_Init+0x94>)
 800636a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800636e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006370:	4b1a      	ldr	r3, [pc, #104]	; (80063dc <USBD_LL_Init+0x94>)
 8006372:	2204      	movs	r2, #4
 8006374:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006376:	4b19      	ldr	r3, [pc, #100]	; (80063dc <USBD_LL_Init+0x94>)
 8006378:	2202      	movs	r2, #2
 800637a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800637c:	4b17      	ldr	r3, [pc, #92]	; (80063dc <USBD_LL_Init+0x94>)
 800637e:	2200      	movs	r2, #0
 8006380:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006382:	4b16      	ldr	r3, [pc, #88]	; (80063dc <USBD_LL_Init+0x94>)
 8006384:	2202      	movs	r2, #2
 8006386:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006388:	4b14      	ldr	r3, [pc, #80]	; (80063dc <USBD_LL_Init+0x94>)
 800638a:	2200      	movs	r2, #0
 800638c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <USBD_LL_Init+0x94>)
 8006390:	2200      	movs	r2, #0
 8006392:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006394:	4b11      	ldr	r3, [pc, #68]	; (80063dc <USBD_LL_Init+0x94>)
 8006396:	2200      	movs	r2, #0
 8006398:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800639a:	4b10      	ldr	r3, [pc, #64]	; (80063dc <USBD_LL_Init+0x94>)
 800639c:	2200      	movs	r2, #0
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80063a0:	4b0e      	ldr	r3, [pc, #56]	; (80063dc <USBD_LL_Init+0x94>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80063a6:	480d      	ldr	r0, [pc, #52]	; (80063dc <USBD_LL_Init+0x94>)
 80063a8:	f7fa fd48 	bl	8000e3c <HAL_PCD_Init>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80063b2:	f7fa f979 	bl	80006a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80063b6:	2180      	movs	r1, #128	; 0x80
 80063b8:	4808      	ldr	r0, [pc, #32]	; (80063dc <USBD_LL_Init+0x94>)
 80063ba:	f7fb ff88 	bl	80022ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80063be:	2240      	movs	r2, #64	; 0x40
 80063c0:	2100      	movs	r1, #0
 80063c2:	4806      	ldr	r0, [pc, #24]	; (80063dc <USBD_LL_Init+0x94>)
 80063c4:	f7fb ff3c 	bl	8002240 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80063c8:	2280      	movs	r2, #128	; 0x80
 80063ca:	2101      	movs	r1, #1
 80063cc:	4803      	ldr	r0, [pc, #12]	; (80063dc <USBD_LL_Init+0x94>)
 80063ce:	f7fb ff37 	bl	8002240 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	20000618 	.word	0x20000618

080063e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fa fe3d 	bl	8001076 <HAL_PCD_Start>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f930 	bl	8006668 <USBD_Get_USB_Status>
 8006408:	4603      	mov	r3, r0
 800640a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800640c:	7bbb      	ldrb	r3, [r7, #14]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	4608      	mov	r0, r1
 8006420:	4611      	mov	r1, r2
 8006422:	461a      	mov	r2, r3
 8006424:	4603      	mov	r3, r0
 8006426:	70fb      	strb	r3, [r7, #3]
 8006428:	460b      	mov	r3, r1
 800642a:	70bb      	strb	r3, [r7, #2]
 800642c:	4613      	mov	r3, r2
 800642e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800643e:	78bb      	ldrb	r3, [r7, #2]
 8006440:	883a      	ldrh	r2, [r7, #0]
 8006442:	78f9      	ldrb	r1, [r7, #3]
 8006444:	f7fb fb0e 	bl	8001a64 <HAL_PCD_EP_Open>
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	4618      	mov	r0, r3
 8006450:	f000 f90a 	bl	8006668 <USBD_Get_USB_Status>
 8006454:	4603      	mov	r3, r0
 8006456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006458:	7bbb      	ldrb	r3, [r7, #14]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800647c:	78fa      	ldrb	r2, [r7, #3]
 800647e:	4611      	mov	r1, r2
 8006480:	4618      	mov	r0, r3
 8006482:	f7fb fb57 	bl	8001b34 <HAL_PCD_EP_Close>
 8006486:	4603      	mov	r3, r0
 8006488:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	4618      	mov	r0, r3
 800648e:	f000 f8eb 	bl	8006668 <USBD_Get_USB_Status>
 8006492:	4603      	mov	r3, r0
 8006494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006496:	7bbb      	ldrb	r3, [r7, #14]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80064ba:	78fa      	ldrb	r2, [r7, #3]
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fb fc17 	bl	8001cf2 <HAL_PCD_EP_SetStall>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f8cc 	bl	8006668 <USBD_Get_USB_Status>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80064f8:	78fa      	ldrb	r2, [r7, #3]
 80064fa:	4611      	mov	r1, r2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fb fc5c 	bl	8001dba <HAL_PCD_EP_ClrStall>
 8006502:	4603      	mov	r3, r0
 8006504:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f8ad 	bl	8006668 <USBD_Get_USB_Status>
 800650e:	4603      	mov	r3, r0
 8006510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006512:	7bbb      	ldrb	r3, [r7, #14]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800652e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006534:	2b00      	cmp	r3, #0
 8006536:	da0b      	bge.n	8006550 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	4613      	mov	r3, r2
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	333e      	adds	r3, #62	; 0x3e
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	e00b      	b.n	8006568 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	4613      	mov	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006566:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800658e:	78fa      	ldrb	r2, [r7, #3]
 8006590:	4611      	mov	r1, r2
 8006592:	4618      	mov	r0, r3
 8006594:	f7fb fa41 	bl	8001a1a <HAL_PCD_SetAddress>
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 f862 	bl	8006668 <USBD_Get_USB_Status>
 80065a4:	4603      	mov	r3, r0
 80065a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	460b      	mov	r3, r1
 80065c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80065d0:	7af9      	ldrb	r1, [r7, #11]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	f7fb fb42 	bl	8001c5e <HAL_PCD_EP_Transmit>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 f841 	bl	8006668 <USBD_Get_USB_Status>
 80065e6:	4603      	mov	r3, r0
 80065e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80065ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	460b      	mov	r3, r1
 8006602:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006612:	7af9      	ldrb	r1, [r7, #11]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	f7fb fad6 	bl	8001bc8 <HAL_PCD_EP_Receive>
 800661c:	4603      	mov	r3, r0
 800661e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 f820 	bl	8006668 <USBD_Get_USB_Status>
 8006628:	4603      	mov	r3, r0
 800662a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800662c:	7dbb      	ldrb	r3, [r7, #22]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006640:	4b03      	ldr	r3, [pc, #12]	; (8006650 <USBD_static_malloc+0x18>)
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000b24 	.word	0x20000b24

08006654 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]

}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d817      	bhi.n	80066ac <USBD_Get_USB_Status+0x44>
 800667c:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <USBD_Get_USB_Status+0x1c>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	08006695 	.word	0x08006695
 8006688:	0800669b 	.word	0x0800669b
 800668c:	080066a1 	.word	0x080066a1
 8006690:	080066a7 	.word	0x080066a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	73fb      	strb	r3, [r7, #15]
    break;
 8006698:	e00b      	b.n	80066b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800669a:	2303      	movs	r3, #3
 800669c:	73fb      	strb	r3, [r7, #15]
    break;
 800669e:	e008      	b.n	80066b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
    break;
 80066a4:	e005      	b.n	80066b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80066a6:	2303      	movs	r3, #3
 80066a8:	73fb      	strb	r3, [r7, #15]
    break;
 80066aa:	e002      	b.n	80066b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80066ac:	2303      	movs	r3, #3
 80066ae:	73fb      	strb	r3, [r7, #15]
    break;
 80066b0:	bf00      	nop
  }
  return usb_status;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <__libc_init_array>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	4d0d      	ldr	r5, [pc, #52]	; (80066f8 <__libc_init_array+0x38>)
 80066c4:	4c0d      	ldr	r4, [pc, #52]	; (80066fc <__libc_init_array+0x3c>)
 80066c6:	1b64      	subs	r4, r4, r5
 80066c8:	10a4      	asrs	r4, r4, #2
 80066ca:	2600      	movs	r6, #0
 80066cc:	42a6      	cmp	r6, r4
 80066ce:	d109      	bne.n	80066e4 <__libc_init_array+0x24>
 80066d0:	4d0b      	ldr	r5, [pc, #44]	; (8006700 <__libc_init_array+0x40>)
 80066d2:	4c0c      	ldr	r4, [pc, #48]	; (8006704 <__libc_init_array+0x44>)
 80066d4:	f000 f820 	bl	8006718 <_init>
 80066d8:	1b64      	subs	r4, r4, r5
 80066da:	10a4      	asrs	r4, r4, #2
 80066dc:	2600      	movs	r6, #0
 80066de:	42a6      	cmp	r6, r4
 80066e0:	d105      	bne.n	80066ee <__libc_init_array+0x2e>
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
 80066e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e8:	4798      	blx	r3
 80066ea:	3601      	adds	r6, #1
 80066ec:	e7ee      	b.n	80066cc <__libc_init_array+0xc>
 80066ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f2:	4798      	blx	r3
 80066f4:	3601      	adds	r6, #1
 80066f6:	e7f2      	b.n	80066de <__libc_init_array+0x1e>
 80066f8:	08006790 	.word	0x08006790
 80066fc:	08006790 	.word	0x08006790
 8006700:	08006790 	.word	0x08006790
 8006704:	08006794 	.word	0x08006794

08006708 <memset>:
 8006708:	4402      	add	r2, r0
 800670a:	4603      	mov	r3, r0
 800670c:	4293      	cmp	r3, r2
 800670e:	d100      	bne.n	8006712 <memset+0xa>
 8006710:	4770      	bx	lr
 8006712:	f803 1b01 	strb.w	r1, [r3], #1
 8006716:	e7f9      	b.n	800670c <memset+0x4>

08006718 <_init>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr

08006724 <_fini>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr
